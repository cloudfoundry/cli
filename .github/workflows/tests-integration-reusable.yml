# GitHub repo level Secrets and Variables

# secrets.CLIENT_SECRET
# secrets.GITHUB_TOKEN
# secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN
# vars.SHEPHERD_POOL_NAME

name: "pvt: run integration tests"

on:
  workflow_call:
    inputs:
      capi-version:
        required: true
        type: string
      run-with-client-creds:
        required: true
        type: boolean
      os:
        required: true
        type: string
      name:
        required: true
        type: string
      pool-name:
        type: string
        default: ${{ vars.SHEPHERD_POOL_NAME }}
      pool-namespace:
        type: string
        default: 'official'
jobs:
  run-integration-tests:
    defaults:
      run:
        shell: bash
    runs-on: ${{ inputs.os }} 
    container: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource:latest
    steps:
    - name: Checkout cli
      uses: actions/checkout@v4
      with:
        ref: ${{github.event.workflow_run.head_sha}}

    - name: Checkout cli-ci
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cli-ci
        path: cli-ci

    - id: read-min-capi
      name: Read MIN CAPI
      run: |
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\
        chmod +x /usr/bin/yq
        version=$(yq '.capi-version-min' build_data.yml)
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Checkout cf-deployment Min CAPI
      if: ${{ inputs.capi-version != 'edge' }}
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment
        path: cf-deployment
        ref: ${{ steps.read-min-capi.outputs.version }}

    - name: Checkout cf-deployment
      uses: actions/checkout@v4
      if: ${{ inputs.capi-version == 'edge' }}
      with:
        repository: cloudfoundry/cf-deployment
        path: cf-deployment

    - name: Checkout CF deployment tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        path: cf-deployment-concourse-tasks

    - id: claim-env
      name: Claim Environment
      env:
        account_token: ${{ secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN }}
        pool_name: ${{ inputs.pool-name }}
        pool_namespace: ${{ inputs.pool-namespace }}
      run: |
        shepherd login service-account ${account_token}

        echo "shepherd create lease --duration 8h --pool ${pool_name} --pool-namespace ${pool_namespace} --namespace tas-devex"
        lease_id=$(shepherd create lease --duration 8h --pool ${pool_name} --pool-namespace ${pool_namespace} --namespace tas-devex --json | jq -r .id)
        # Give sometime for the lease to complete. Shepherd may take upto an 3 hours to create an env
        # if the pool is empty.
        count=0
        while [ $count -lt 360 ] ; do
          sleep 30
          status=$(shepherd get lease ${lease_id} --namespace tas-devex --json | jq -r .status)
          if [ $status == "LEASED" ] ; then
            shepherd get lease ${lease_id} --namespace tas-devex --json | jq .output > metadata.json
            break
          elif [ $status == "FAILED" -o $status == "EXPIRED" ] ; then
            echo "There was an error obtaining the lease. Lease status is ${status}."
            exit 1
          else
            echo "Waiting for environment to be ready. Lease status is ${status}."
          fi
          count=$(($count+1))
        done

        env_name=$(jq -r .name metadata.json)
        cat metadata.json | jq -r '.name'
        echo "lease-id=$lease_id" >> "${GITHUB_OUTPUT}"

    - name: Install Tools
      run: |
        if [[ ${{ inputs.os }} =~ "windows" ]]
        then
          install_location=/usr/bin
          bbl_artifact=bbl-v8.4.110_windows.exe
          bosh_cli_artifact=bosh-cli-7.0.1-windows-amd64.exe
          credhub_artifact=credhub-windows-2.9.4.tgz
        else
          install_location=/usr/local/bin
          bbl_artifact=bbl-v8.4.110_linux_x86-64
          bosh_cli_artifact=bosh-cli-7.0.1-linux-amd64
          credhub_artifact=credhub-linux-2.9.4.tgz
        fi
        curl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v8.4.110/${bbl_artifact} --silent --location --output  $install_location/bbl
        chmod +x $install_location/bbl
        bbl --version

        curl https://s3.amazonaws.com/bosh-cli-artifacts/$bosh_cli_artifact --silent --output $install_location/bosh --location
        chmod +x $install_location/bosh
        bosh --version

        curl https://github.com/cloudfoundry/credhub-cli/releases/download/2.9.4/$credhub_artifact --silent --output /tmp/$credhub_artifact --location
        tar xzvf /tmp/$credhub_artifact
        mv credhub $install_location/credhub
        chmod +x $install_location/credhub
        credhub --version

        apt-get update
        apt-get install -y build-essential

    - name: Deploy Isolation Segment and OIDC Provider
      if: ${{ inputs.capi-version == 'edge' }}
      run: |
        env_name=$(jq -r .name metadata.json)
        jq -r .bosh.jumpbox_private_key metadata.json > /tmp/${env_name}.priv
        eval "$(bbl print-env --metadata-file metadata.json)"

        # deploy
        bosh -d cf manifest > /tmp/manifest.yml
        bosh interpolate /tmp/manifest.yml \
          -o .github/ops-files/use-cflinuxfs3.yml \
          -o cf-deployment/operations/add-persistent-isolation-segment-diego-cell.yml \
          -o cli-ci/ci/infrastructure/operations/add-oidc-provider.yml \
          -o cli-ci/ci/infrastructure/operations/add-uaa-client-credentials.yml \
          -o cli-ci/ci/infrastructure/operations/diego-cell-instances.yml \
          -v client-secret="${{ secrets.CLIENT_SECRET }}" \
          > ./director.yml

        bosh -d cf deploy director.yml -n
        echo "Deployed CAPI version:"
        bosh -d cf releases | grep capi

    - name: Deploy MIN CAPI with Isolation Segment and OIDC Provider
      if: ${{ inputs.capi-version != 'edge' }}
      run: |
        env_name=$(jq -r .name metadata.json)
        jq -r .bosh.jumpbox_private_key metadata.json > /tmp/${env_name}.priv
        eval "$(bbl print-env --metadata-file metadata.json)"

        # deploy
        bosh -d cf manifest > /tmp/manifest.yml
        bosh interpolate /tmp/manifest.yml \
          -o cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml \
          -o cli-ci/ci/infrastructure/operations/add-oidc-provider.yml \
          -o cli-ci/ci/infrastructure/operations/add-uaa-client-credentials.yml \
          -o cli-ci/ci/infrastructure/operations/diego-cell-instances.yml \
          -o cli-ci/ci/infrastructure/operations/use-latest-ruby-buildpack.yml \
          -v client-secret="${{ secrets.CLIENT_SECRET }}" \
          > ./director.yml

        bosh -d cf deploy director.yml -n
        echo "Deployed CAPI version:"
        bosh -d cf releases | grep capi

    - name: Set Up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        check-latest: true

    - name: Run Integration Tests
      if: ${{ !inputs.run-with-client-creds }}
      run: |
        ENV=$(cat metadata.json | jq -r '.name')
        jq -r .bosh.jumpbox_private_key metadata.json > /tmp/${ENV}.priv
        eval "$(bbl print-env --metadata-file ./metadata.json)"
        export CF_INT_PASSWORD="$(credhub get -n /bosh-$ENV/cf/cf_admin_password | bosh interpolate --path /value -)"
        export CF_INT_OIDC_USERNAME="admin-oidc"
        export CF_INT_OIDC_PASSWORD=$(credhub get -n /bosh-$ENV/cf/uaa_oidc_admin_password | bosh interpolate --path /value -)
        API_URL="$(jq -r .cf.api_url metadata.json)"
        export CF_INT_API="https://$API_URL"
        export CF_DIAL_TIMEOUT=15
        export CF_USERNAME=admin
        export FLAKE_ATTEMPTS=2
        export NODES=16
        export GOPATH=$PWD/go
        export PATH="$GOPATH/bin:$PATH"
        export PATH="$PWD/out:$PATH"

        make build

        export CF_PASSWORD=${CF_INT_PASSWORD}
        cf api ${CF_INT_API} --skip-ssl-validation
        cf auth

        make integration-tests-full-ci

    - name: Run Integration Tests with client credentials
      if: ${{ inputs.run-with-client-creds }}
      env:
        CF_INT_CLIENT_ID: 'potato-face'
        CF_INT_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      run: |
        ENV=$(cat metadata.json | jq -r '.name')
        jq -r .bosh.jumpbox_private_key metadata.json > /tmp/${ENV}.priv
        eval "$(bbl print-env --metadata-file ./metadata.json)"
        export CF_INT_PASSWORD="$(credhub get -n /bosh-$ENV/cf/cf_admin_password | bosh interpolate --path /value -)"
        export CF_INT_OIDC_USERNAME="admin-oidc"
        export CF_INT_OIDC_PASSWORD=$(credhub get -n /bosh-$ENV/cf/uaa_oidc_admin_password | bosh interpolate --path /value -)
        API_URL="$(jq -r .cf.api_url metadata.json)"
        export CF_INT_API="https://$API_URL"
        export CF_DIAL_TIMEOUT=15
        export CF_USERNAME=admin
        export FLAKE_ATTEMPTS=2
        export NODES=16
        export GOPATH=$PWD/go
        export PATH="$GOPATH/bin:$PATH"
        export PATH="$PWD/out:$PATH"

        make build

        export CF_PASSWORD=${CF_INT_PASSWORD}
        cf api ${CF_INT_API} --skip-ssl-validation
        cf auth

        make integration-tests-full-ci

    - name: Unclaim environment
      if: always()
      env:
        account_token: ${{ secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN }}
      run: |
        shepherd login service-account ${account_token}
        set -x
        shepherd delete lease ${{ steps.claim-env.outputs.lease-id }} --namespace tas-devex
