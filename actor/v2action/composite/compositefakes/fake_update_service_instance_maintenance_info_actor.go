// Code generated by counterfeiter. DO NOT EDIT.
package compositefakes

import (
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/v2action"
	"code.cloudfoundry.org/cli/v7/actor/v2action/composite"
)

type FakeUpdateServiceInstanceMaintenanceInfoActor struct {
	UpdateServiceInstanceMaintenanceInfoStub        func(string, v2action.MaintenanceInfo) (v2action.Warnings, error)
	updateServiceInstanceMaintenanceInfoMutex       sync.RWMutex
	updateServiceInstanceMaintenanceInfoArgsForCall []struct {
		arg1 string
		arg2 v2action.MaintenanceInfo
	}
	updateServiceInstanceMaintenanceInfoReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	updateServiceInstanceMaintenanceInfoReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfo(arg1 string, arg2 v2action.MaintenanceInfo) (v2action.Warnings, error) {
	fake.updateServiceInstanceMaintenanceInfoMutex.Lock()
	ret, specificReturn := fake.updateServiceInstanceMaintenanceInfoReturnsOnCall[len(fake.updateServiceInstanceMaintenanceInfoArgsForCall)]
	fake.updateServiceInstanceMaintenanceInfoArgsForCall = append(fake.updateServiceInstanceMaintenanceInfoArgsForCall, struct {
		arg1 string
		arg2 v2action.MaintenanceInfo
	}{arg1, arg2})
	fake.recordInvocation("UpdateServiceInstanceMaintenanceInfo", []interface{}{arg1, arg2})
	fake.updateServiceInstanceMaintenanceInfoMutex.Unlock()
	if fake.UpdateServiceInstanceMaintenanceInfoStub != nil {
		return fake.UpdateServiceInstanceMaintenanceInfoStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceInstanceMaintenanceInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfoCallCount() int {
	fake.updateServiceInstanceMaintenanceInfoMutex.RLock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.RUnlock()
	return len(fake.updateServiceInstanceMaintenanceInfoArgsForCall)
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfoCalls(stub func(string, v2action.MaintenanceInfo) (v2action.Warnings, error)) {
	fake.updateServiceInstanceMaintenanceInfoMutex.Lock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.Unlock()
	fake.UpdateServiceInstanceMaintenanceInfoStub = stub
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfoArgsForCall(i int) (string, v2action.MaintenanceInfo) {
	fake.updateServiceInstanceMaintenanceInfoMutex.RLock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.RUnlock()
	argsForCall := fake.updateServiceInstanceMaintenanceInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfoReturns(result1 v2action.Warnings, result2 error) {
	fake.updateServiceInstanceMaintenanceInfoMutex.Lock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.Unlock()
	fake.UpdateServiceInstanceMaintenanceInfoStub = nil
	fake.updateServiceInstanceMaintenanceInfoReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) UpdateServiceInstanceMaintenanceInfoReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.updateServiceInstanceMaintenanceInfoMutex.Lock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.Unlock()
	fake.UpdateServiceInstanceMaintenanceInfoStub = nil
	if fake.updateServiceInstanceMaintenanceInfoReturnsOnCall == nil {
		fake.updateServiceInstanceMaintenanceInfoReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.updateServiceInstanceMaintenanceInfoReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateServiceInstanceMaintenanceInfoMutex.RLock()
	defer fake.updateServiceInstanceMaintenanceInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdateServiceInstanceMaintenanceInfoActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ composite.UpdateServiceInstanceMaintenanceInfoActor = new(FakeUpdateServiceInstanceMaintenanceInfoActor)
