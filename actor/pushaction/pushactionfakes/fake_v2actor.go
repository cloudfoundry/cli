// Code generated by counterfeiter. DO NOT EDIT.
package pushactionfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/pushaction"
	"code.cloudfoundry.org/cli/v7/actor/v2action"
)

type FakeV2Actor struct {
	BindServiceByApplicationAndServiceInstanceStub        func(string, string) (v2action.Warnings, error)
	bindServiceByApplicationAndServiceInstanceMutex       sync.RWMutex
	bindServiceByApplicationAndServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindServiceByApplicationAndServiceInstanceReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	bindServiceByApplicationAndServiceInstanceReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	CreateApplicationStub        func(v2action.Application) (v2action.Application, v2action.Warnings, error)
	createApplicationMutex       sync.RWMutex
	createApplicationArgsForCall []struct {
		arg1 v2action.Application
	}
	createApplicationReturns struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	createApplicationReturnsOnCall map[int]struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	CreateRouteStub        func(v2action.Route, bool) (v2action.Route, v2action.Warnings, error)
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		arg1 v2action.Route
		arg2 bool
	}
	createRouteReturns struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	FindRouteBoundToSpaceWithSettingsStub        func(v2action.Route) (v2action.Route, v2action.Warnings, error)
	findRouteBoundToSpaceWithSettingsMutex       sync.RWMutex
	findRouteBoundToSpaceWithSettingsArgsForCall []struct {
		arg1 v2action.Route
	}
	findRouteBoundToSpaceWithSettingsReturns struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	findRouteBoundToSpaceWithSettingsReturnsOnCall map[int]struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	GetApplicationByNameAndSpaceStub        func(string, string) (v2action.Application, v2action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	GetApplicationRoutesStub        func(string) (v2action.Routes, v2action.Warnings, error)
	getApplicationRoutesMutex       sync.RWMutex
	getApplicationRoutesArgsForCall []struct {
		arg1 string
	}
	getApplicationRoutesReturns struct {
		result1 v2action.Routes
		result2 v2action.Warnings
		result3 error
	}
	getApplicationRoutesReturnsOnCall map[int]struct {
		result1 v2action.Routes
		result2 v2action.Warnings
		result3 error
	}
	GetDomainsByNameAndOrganizationStub        func([]string, string) ([]v2action.Domain, v2action.Warnings, error)
	getDomainsByNameAndOrganizationMutex       sync.RWMutex
	getDomainsByNameAndOrganizationArgsForCall []struct {
		arg1 []string
		arg2 string
	}
	getDomainsByNameAndOrganizationReturns struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	getDomainsByNameAndOrganizationReturnsOnCall map[int]struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	GetOrganizationDomainsStub        func(string) ([]v2action.Domain, v2action.Warnings, error)
	getOrganizationDomainsMutex       sync.RWMutex
	getOrganizationDomainsArgsForCall []struct {
		arg1 string
	}
	getOrganizationDomainsReturns struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	getOrganizationDomainsReturnsOnCall map[int]struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	GetServiceInstanceByNameAndSpaceStub        func(string, string) (v2action.ServiceInstance, v2action.Warnings, error)
	getServiceInstanceByNameAndSpaceMutex       sync.RWMutex
	getServiceInstanceByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getServiceInstanceByNameAndSpaceReturns struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	getServiceInstanceByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	GetServiceInstancesByApplicationStub        func(string) ([]v2action.ServiceInstance, v2action.Warnings, error)
	getServiceInstancesByApplicationMutex       sync.RWMutex
	getServiceInstancesByApplicationArgsForCall []struct {
		arg1 string
	}
	getServiceInstancesByApplicationReturns struct {
		result1 []v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	getServiceInstancesByApplicationReturnsOnCall map[int]struct {
		result1 []v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	GetStackStub        func(string) (v2action.Stack, v2action.Warnings, error)
	getStackMutex       sync.RWMutex
	getStackArgsForCall []struct {
		arg1 string
	}
	getStackReturns struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}
	getStackReturnsOnCall map[int]struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}
	GetStackByNameStub        func(string) (v2action.Stack, v2action.Warnings, error)
	getStackByNameMutex       sync.RWMutex
	getStackByNameArgsForCall []struct {
		arg1 string
	}
	getStackByNameReturns struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}
	getStackByNameReturnsOnCall map[int]struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}
	MapRouteToApplicationStub        func(string, string) (v2action.Warnings, error)
	mapRouteToApplicationMutex       sync.RWMutex
	mapRouteToApplicationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	mapRouteToApplicationReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	mapRouteToApplicationReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	PollJobStub        func(v2action.Job) (v2action.Warnings, error)
	pollJobMutex       sync.RWMutex
	pollJobArgsForCall []struct {
		arg1 v2action.Job
	}
	pollJobReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	pollJobReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	ResourceMatchStub        func([]v2action.Resource) ([]v2action.Resource, []v2action.Resource, v2action.Warnings, error)
	resourceMatchMutex       sync.RWMutex
	resourceMatchArgsForCall []struct {
		arg1 []v2action.Resource
	}
	resourceMatchReturns struct {
		result1 []v2action.Resource
		result2 []v2action.Resource
		result3 v2action.Warnings
		result4 error
	}
	resourceMatchReturnsOnCall map[int]struct {
		result1 []v2action.Resource
		result2 []v2action.Resource
		result3 v2action.Warnings
		result4 error
	}
	UnmapRouteFromApplicationStub        func(string, string) (v2action.Warnings, error)
	unmapRouteFromApplicationMutex       sync.RWMutex
	unmapRouteFromApplicationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unmapRouteFromApplicationReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	unmapRouteFromApplicationReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	UpdateApplicationStub        func(v2action.Application) (v2action.Application, v2action.Warnings, error)
	updateApplicationMutex       sync.RWMutex
	updateApplicationArgsForCall []struct {
		arg1 v2action.Application
	}
	updateApplicationReturns struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	updateApplicationReturnsOnCall map[int]struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}
	UploadApplicationPackageStub        func(string, []v2action.Resource, io.Reader, int64) (v2action.Job, v2action.Warnings, error)
	uploadApplicationPackageMutex       sync.RWMutex
	uploadApplicationPackageArgsForCall []struct {
		arg1 string
		arg2 []v2action.Resource
		arg3 io.Reader
		arg4 int64
	}
	uploadApplicationPackageReturns struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}
	uploadApplicationPackageReturnsOnCall map[int]struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}
	UploadDropletStub        func(string, io.Reader, int64) (v2action.Job, v2action.Warnings, error)
	uploadDropletMutex       sync.RWMutex
	uploadDropletArgsForCall []struct {
		arg1 string
		arg2 io.Reader
		arg3 int64
	}
	uploadDropletReturns struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}
	uploadDropletReturnsOnCall map[int]struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstance(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.bindServiceByApplicationAndServiceInstanceMutex.Lock()
	ret, specificReturn := fake.bindServiceByApplicationAndServiceInstanceReturnsOnCall[len(fake.bindServiceByApplicationAndServiceInstanceArgsForCall)]
	fake.bindServiceByApplicationAndServiceInstanceArgsForCall = append(fake.bindServiceByApplicationAndServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.BindServiceByApplicationAndServiceInstanceStub
	fakeReturns := fake.bindServiceByApplicationAndServiceInstanceReturns
	fake.recordInvocation("BindServiceByApplicationAndServiceInstance", []interface{}{arg1, arg2})
	fake.bindServiceByApplicationAndServiceInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstanceCallCount() int {
	fake.bindServiceByApplicationAndServiceInstanceMutex.RLock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.RUnlock()
	return len(fake.bindServiceByApplicationAndServiceInstanceArgsForCall)
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstanceCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.bindServiceByApplicationAndServiceInstanceMutex.Lock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.Unlock()
	fake.BindServiceByApplicationAndServiceInstanceStub = stub
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstanceArgsForCall(i int) (string, string) {
	fake.bindServiceByApplicationAndServiceInstanceMutex.RLock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.RUnlock()
	argsForCall := fake.bindServiceByApplicationAndServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstanceReturns(result1 v2action.Warnings, result2 error) {
	fake.bindServiceByApplicationAndServiceInstanceMutex.Lock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.Unlock()
	fake.BindServiceByApplicationAndServiceInstanceStub = nil
	fake.bindServiceByApplicationAndServiceInstanceReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) BindServiceByApplicationAndServiceInstanceReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.bindServiceByApplicationAndServiceInstanceMutex.Lock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.Unlock()
	fake.BindServiceByApplicationAndServiceInstanceStub = nil
	if fake.bindServiceByApplicationAndServiceInstanceReturnsOnCall == nil {
		fake.bindServiceByApplicationAndServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.bindServiceByApplicationAndServiceInstanceReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	stub := fake.CloudControllerAPIVersionStub
	fakeReturns := fake.cloudControllerAPIVersionReturns
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeV2Actor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeV2Actor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeV2Actor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeV2Actor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeV2Actor) CreateApplication(arg1 v2action.Application) (v2action.Application, v2action.Warnings, error) {
	fake.createApplicationMutex.Lock()
	ret, specificReturn := fake.createApplicationReturnsOnCall[len(fake.createApplicationArgsForCall)]
	fake.createApplicationArgsForCall = append(fake.createApplicationArgsForCall, struct {
		arg1 v2action.Application
	}{arg1})
	stub := fake.CreateApplicationStub
	fakeReturns := fake.createApplicationReturns
	fake.recordInvocation("CreateApplication", []interface{}{arg1})
	fake.createApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) CreateApplicationCallCount() int {
	fake.createApplicationMutex.RLock()
	defer fake.createApplicationMutex.RUnlock()
	return len(fake.createApplicationArgsForCall)
}

func (fake *FakeV2Actor) CreateApplicationCalls(stub func(v2action.Application) (v2action.Application, v2action.Warnings, error)) {
	fake.createApplicationMutex.Lock()
	defer fake.createApplicationMutex.Unlock()
	fake.CreateApplicationStub = stub
}

func (fake *FakeV2Actor) CreateApplicationArgsForCall(i int) v2action.Application {
	fake.createApplicationMutex.RLock()
	defer fake.createApplicationMutex.RUnlock()
	argsForCall := fake.createApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) CreateApplicationReturns(result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.createApplicationMutex.Lock()
	defer fake.createApplicationMutex.Unlock()
	fake.CreateApplicationStub = nil
	fake.createApplicationReturns = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) CreateApplicationReturnsOnCall(i int, result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.createApplicationMutex.Lock()
	defer fake.createApplicationMutex.Unlock()
	fake.CreateApplicationStub = nil
	if fake.createApplicationReturnsOnCall == nil {
		fake.createApplicationReturnsOnCall = make(map[int]struct {
			result1 v2action.Application
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createApplicationReturnsOnCall[i] = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) CreateRoute(arg1 v2action.Route, arg2 bool) (v2action.Route, v2action.Warnings, error) {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		arg1 v2action.Route
		arg2 bool
	}{arg1, arg2})
	stub := fake.CreateRouteStub
	fakeReturns := fake.createRouteReturns
	fake.recordInvocation("CreateRoute", []interface{}{arg1, arg2})
	fake.createRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakeV2Actor) CreateRouteCalls(stub func(v2action.Route, bool) (v2action.Route, v2action.Warnings, error)) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = stub
}

func (fake *FakeV2Actor) CreateRouteArgsForCall(i int) (v2action.Route, bool) {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	argsForCall := fake.createRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) CreateRouteReturns(result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) CreateRouteReturnsOnCall(i int, result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 v2action.Route
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettings(arg1 v2action.Route) (v2action.Route, v2action.Warnings, error) {
	fake.findRouteBoundToSpaceWithSettingsMutex.Lock()
	ret, specificReturn := fake.findRouteBoundToSpaceWithSettingsReturnsOnCall[len(fake.findRouteBoundToSpaceWithSettingsArgsForCall)]
	fake.findRouteBoundToSpaceWithSettingsArgsForCall = append(fake.findRouteBoundToSpaceWithSettingsArgsForCall, struct {
		arg1 v2action.Route
	}{arg1})
	stub := fake.FindRouteBoundToSpaceWithSettingsStub
	fakeReturns := fake.findRouteBoundToSpaceWithSettingsReturns
	fake.recordInvocation("FindRouteBoundToSpaceWithSettings", []interface{}{arg1})
	fake.findRouteBoundToSpaceWithSettingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettingsCallCount() int {
	fake.findRouteBoundToSpaceWithSettingsMutex.RLock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.RUnlock()
	return len(fake.findRouteBoundToSpaceWithSettingsArgsForCall)
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettingsCalls(stub func(v2action.Route) (v2action.Route, v2action.Warnings, error)) {
	fake.findRouteBoundToSpaceWithSettingsMutex.Lock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.Unlock()
	fake.FindRouteBoundToSpaceWithSettingsStub = stub
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettingsArgsForCall(i int) v2action.Route {
	fake.findRouteBoundToSpaceWithSettingsMutex.RLock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.RUnlock()
	argsForCall := fake.findRouteBoundToSpaceWithSettingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettingsReturns(result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.findRouteBoundToSpaceWithSettingsMutex.Lock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.Unlock()
	fake.FindRouteBoundToSpaceWithSettingsStub = nil
	fake.findRouteBoundToSpaceWithSettingsReturns = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) FindRouteBoundToSpaceWithSettingsReturnsOnCall(i int, result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.findRouteBoundToSpaceWithSettingsMutex.Lock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.Unlock()
	fake.FindRouteBoundToSpaceWithSettingsStub = nil
	if fake.findRouteBoundToSpaceWithSettingsReturnsOnCall == nil {
		fake.findRouteBoundToSpaceWithSettingsReturnsOnCall = make(map[int]struct {
			result1 v2action.Route
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.findRouteBoundToSpaceWithSettingsReturnsOnCall[i] = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpace(arg1 string, arg2 string) (v2action.Application, v2action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetApplicationByNameAndSpaceStub
	fakeReturns := fake.getApplicationByNameAndSpaceReturns
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{arg1, arg2})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpaceCalls(stub func(string, string) (v2action.Application, v2action.Warnings, error)) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = stub
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpaceReturns(result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.Application
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetApplicationRoutes(arg1 string) (v2action.Routes, v2action.Warnings, error) {
	fake.getApplicationRoutesMutex.Lock()
	ret, specificReturn := fake.getApplicationRoutesReturnsOnCall[len(fake.getApplicationRoutesArgsForCall)]
	fake.getApplicationRoutesArgsForCall = append(fake.getApplicationRoutesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetApplicationRoutesStub
	fakeReturns := fake.getApplicationRoutesReturns
	fake.recordInvocation("GetApplicationRoutes", []interface{}{arg1})
	fake.getApplicationRoutesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetApplicationRoutesCallCount() int {
	fake.getApplicationRoutesMutex.RLock()
	defer fake.getApplicationRoutesMutex.RUnlock()
	return len(fake.getApplicationRoutesArgsForCall)
}

func (fake *FakeV2Actor) GetApplicationRoutesCalls(stub func(string) (v2action.Routes, v2action.Warnings, error)) {
	fake.getApplicationRoutesMutex.Lock()
	defer fake.getApplicationRoutesMutex.Unlock()
	fake.GetApplicationRoutesStub = stub
}

func (fake *FakeV2Actor) GetApplicationRoutesArgsForCall(i int) string {
	fake.getApplicationRoutesMutex.RLock()
	defer fake.getApplicationRoutesMutex.RUnlock()
	argsForCall := fake.getApplicationRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) GetApplicationRoutesReturns(result1 v2action.Routes, result2 v2action.Warnings, result3 error) {
	fake.getApplicationRoutesMutex.Lock()
	defer fake.getApplicationRoutesMutex.Unlock()
	fake.GetApplicationRoutesStub = nil
	fake.getApplicationRoutesReturns = struct {
		result1 v2action.Routes
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetApplicationRoutesReturnsOnCall(i int, result1 v2action.Routes, result2 v2action.Warnings, result3 error) {
	fake.getApplicationRoutesMutex.Lock()
	defer fake.getApplicationRoutesMutex.Unlock()
	fake.GetApplicationRoutesStub = nil
	if fake.getApplicationRoutesReturnsOnCall == nil {
		fake.getApplicationRoutesReturnsOnCall = make(map[int]struct {
			result1 v2action.Routes
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getApplicationRoutesReturnsOnCall[i] = struct {
		result1 v2action.Routes
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganization(arg1 []string, arg2 string) ([]v2action.Domain, v2action.Warnings, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getDomainsByNameAndOrganizationMutex.Lock()
	ret, specificReturn := fake.getDomainsByNameAndOrganizationReturnsOnCall[len(fake.getDomainsByNameAndOrganizationArgsForCall)]
	fake.getDomainsByNameAndOrganizationArgsForCall = append(fake.getDomainsByNameAndOrganizationArgsForCall, struct {
		arg1 []string
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.GetDomainsByNameAndOrganizationStub
	fakeReturns := fake.getDomainsByNameAndOrganizationReturns
	fake.recordInvocation("GetDomainsByNameAndOrganization", []interface{}{arg1Copy, arg2})
	fake.getDomainsByNameAndOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganizationCallCount() int {
	fake.getDomainsByNameAndOrganizationMutex.RLock()
	defer fake.getDomainsByNameAndOrganizationMutex.RUnlock()
	return len(fake.getDomainsByNameAndOrganizationArgsForCall)
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganizationCalls(stub func([]string, string) ([]v2action.Domain, v2action.Warnings, error)) {
	fake.getDomainsByNameAndOrganizationMutex.Lock()
	defer fake.getDomainsByNameAndOrganizationMutex.Unlock()
	fake.GetDomainsByNameAndOrganizationStub = stub
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganizationArgsForCall(i int) ([]string, string) {
	fake.getDomainsByNameAndOrganizationMutex.RLock()
	defer fake.getDomainsByNameAndOrganizationMutex.RUnlock()
	argsForCall := fake.getDomainsByNameAndOrganizationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganizationReturns(result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getDomainsByNameAndOrganizationMutex.Lock()
	defer fake.getDomainsByNameAndOrganizationMutex.Unlock()
	fake.GetDomainsByNameAndOrganizationStub = nil
	fake.getDomainsByNameAndOrganizationReturns = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetDomainsByNameAndOrganizationReturnsOnCall(i int, result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getDomainsByNameAndOrganizationMutex.Lock()
	defer fake.getDomainsByNameAndOrganizationMutex.Unlock()
	fake.GetDomainsByNameAndOrganizationStub = nil
	if fake.getDomainsByNameAndOrganizationReturnsOnCall == nil {
		fake.getDomainsByNameAndOrganizationReturnsOnCall = make(map[int]struct {
			result1 []v2action.Domain
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getDomainsByNameAndOrganizationReturnsOnCall[i] = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetOrganizationDomains(arg1 string) ([]v2action.Domain, v2action.Warnings, error) {
	fake.getOrganizationDomainsMutex.Lock()
	ret, specificReturn := fake.getOrganizationDomainsReturnsOnCall[len(fake.getOrganizationDomainsArgsForCall)]
	fake.getOrganizationDomainsArgsForCall = append(fake.getOrganizationDomainsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrganizationDomainsStub
	fakeReturns := fake.getOrganizationDomainsReturns
	fake.recordInvocation("GetOrganizationDomains", []interface{}{arg1})
	fake.getOrganizationDomainsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetOrganizationDomainsCallCount() int {
	fake.getOrganizationDomainsMutex.RLock()
	defer fake.getOrganizationDomainsMutex.RUnlock()
	return len(fake.getOrganizationDomainsArgsForCall)
}

func (fake *FakeV2Actor) GetOrganizationDomainsCalls(stub func(string) ([]v2action.Domain, v2action.Warnings, error)) {
	fake.getOrganizationDomainsMutex.Lock()
	defer fake.getOrganizationDomainsMutex.Unlock()
	fake.GetOrganizationDomainsStub = stub
}

func (fake *FakeV2Actor) GetOrganizationDomainsArgsForCall(i int) string {
	fake.getOrganizationDomainsMutex.RLock()
	defer fake.getOrganizationDomainsMutex.RUnlock()
	argsForCall := fake.getOrganizationDomainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) GetOrganizationDomainsReturns(result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationDomainsMutex.Lock()
	defer fake.getOrganizationDomainsMutex.Unlock()
	fake.GetOrganizationDomainsStub = nil
	fake.getOrganizationDomainsReturns = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetOrganizationDomainsReturnsOnCall(i int, result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationDomainsMutex.Lock()
	defer fake.getOrganizationDomainsMutex.Unlock()
	fake.GetOrganizationDomainsStub = nil
	if fake.getOrganizationDomainsReturnsOnCall == nil {
		fake.getOrganizationDomainsReturnsOnCall = make(map[int]struct {
			result1 []v2action.Domain
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getOrganizationDomainsReturnsOnCall[i] = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpace(arg1 string, arg2 string) (v2action.ServiceInstance, v2action.Warnings, error) {
	fake.getServiceInstanceByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceByNameAndSpaceReturnsOnCall[len(fake.getServiceInstanceByNameAndSpaceArgsForCall)]
	fake.getServiceInstanceByNameAndSpaceArgsForCall = append(fake.getServiceInstanceByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetServiceInstanceByNameAndSpaceStub
	fakeReturns := fake.getServiceInstanceByNameAndSpaceReturns
	fake.recordInvocation("GetServiceInstanceByNameAndSpace", []interface{}{arg1, arg2})
	fake.getServiceInstanceByNameAndSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpaceCallCount() int {
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	return len(fake.getServiceInstanceByNameAndSpaceArgsForCall)
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpaceCalls(stub func(string, string) (v2action.ServiceInstance, v2action.Warnings, error)) {
	fake.getServiceInstanceByNameAndSpaceMutex.Lock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.Unlock()
	fake.GetServiceInstanceByNameAndSpaceStub = stub
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getServiceInstanceByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpaceReturns(result1 v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.getServiceInstanceByNameAndSpaceMutex.Lock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.Unlock()
	fake.GetServiceInstanceByNameAndSpaceStub = nil
	fake.getServiceInstanceByNameAndSpaceReturns = struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetServiceInstanceByNameAndSpaceReturnsOnCall(i int, result1 v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.getServiceInstanceByNameAndSpaceMutex.Lock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.Unlock()
	fake.GetServiceInstanceByNameAndSpaceStub = nil
	if fake.getServiceInstanceByNameAndSpaceReturnsOnCall == nil {
		fake.getServiceInstanceByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceInstance
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceInstanceByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetServiceInstancesByApplication(arg1 string) ([]v2action.ServiceInstance, v2action.Warnings, error) {
	fake.getServiceInstancesByApplicationMutex.Lock()
	ret, specificReturn := fake.getServiceInstancesByApplicationReturnsOnCall[len(fake.getServiceInstancesByApplicationArgsForCall)]
	fake.getServiceInstancesByApplicationArgsForCall = append(fake.getServiceInstancesByApplicationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetServiceInstancesByApplicationStub
	fakeReturns := fake.getServiceInstancesByApplicationReturns
	fake.recordInvocation("GetServiceInstancesByApplication", []interface{}{arg1})
	fake.getServiceInstancesByApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetServiceInstancesByApplicationCallCount() int {
	fake.getServiceInstancesByApplicationMutex.RLock()
	defer fake.getServiceInstancesByApplicationMutex.RUnlock()
	return len(fake.getServiceInstancesByApplicationArgsForCall)
}

func (fake *FakeV2Actor) GetServiceInstancesByApplicationCalls(stub func(string) ([]v2action.ServiceInstance, v2action.Warnings, error)) {
	fake.getServiceInstancesByApplicationMutex.Lock()
	defer fake.getServiceInstancesByApplicationMutex.Unlock()
	fake.GetServiceInstancesByApplicationStub = stub
}

func (fake *FakeV2Actor) GetServiceInstancesByApplicationArgsForCall(i int) string {
	fake.getServiceInstancesByApplicationMutex.RLock()
	defer fake.getServiceInstancesByApplicationMutex.RUnlock()
	argsForCall := fake.getServiceInstancesByApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) GetServiceInstancesByApplicationReturns(result1 []v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.getServiceInstancesByApplicationMutex.Lock()
	defer fake.getServiceInstancesByApplicationMutex.Unlock()
	fake.GetServiceInstancesByApplicationStub = nil
	fake.getServiceInstancesByApplicationReturns = struct {
		result1 []v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetServiceInstancesByApplicationReturnsOnCall(i int, result1 []v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.getServiceInstancesByApplicationMutex.Lock()
	defer fake.getServiceInstancesByApplicationMutex.Unlock()
	fake.GetServiceInstancesByApplicationStub = nil
	if fake.getServiceInstancesByApplicationReturnsOnCall == nil {
		fake.getServiceInstancesByApplicationReturnsOnCall = make(map[int]struct {
			result1 []v2action.ServiceInstance
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceInstancesByApplicationReturnsOnCall[i] = struct {
		result1 []v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetStack(arg1 string) (v2action.Stack, v2action.Warnings, error) {
	fake.getStackMutex.Lock()
	ret, specificReturn := fake.getStackReturnsOnCall[len(fake.getStackArgsForCall)]
	fake.getStackArgsForCall = append(fake.getStackArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStackStub
	fakeReturns := fake.getStackReturns
	fake.recordInvocation("GetStack", []interface{}{arg1})
	fake.getStackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetStackCallCount() int {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	return len(fake.getStackArgsForCall)
}

func (fake *FakeV2Actor) GetStackCalls(stub func(string) (v2action.Stack, v2action.Warnings, error)) {
	fake.getStackMutex.Lock()
	defer fake.getStackMutex.Unlock()
	fake.GetStackStub = stub
}

func (fake *FakeV2Actor) GetStackArgsForCall(i int) string {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	argsForCall := fake.getStackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) GetStackReturns(result1 v2action.Stack, result2 v2action.Warnings, result3 error) {
	fake.getStackMutex.Lock()
	defer fake.getStackMutex.Unlock()
	fake.GetStackStub = nil
	fake.getStackReturns = struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetStackReturnsOnCall(i int, result1 v2action.Stack, result2 v2action.Warnings, result3 error) {
	fake.getStackMutex.Lock()
	defer fake.getStackMutex.Unlock()
	fake.GetStackStub = nil
	if fake.getStackReturnsOnCall == nil {
		fake.getStackReturnsOnCall = make(map[int]struct {
			result1 v2action.Stack
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getStackReturnsOnCall[i] = struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetStackByName(arg1 string) (v2action.Stack, v2action.Warnings, error) {
	fake.getStackByNameMutex.Lock()
	ret, specificReturn := fake.getStackByNameReturnsOnCall[len(fake.getStackByNameArgsForCall)]
	fake.getStackByNameArgsForCall = append(fake.getStackByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStackByNameStub
	fakeReturns := fake.getStackByNameReturns
	fake.recordInvocation("GetStackByName", []interface{}{arg1})
	fake.getStackByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) GetStackByNameCallCount() int {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return len(fake.getStackByNameArgsForCall)
}

func (fake *FakeV2Actor) GetStackByNameCalls(stub func(string) (v2action.Stack, v2action.Warnings, error)) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = stub
}

func (fake *FakeV2Actor) GetStackByNameArgsForCall(i int) string {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	argsForCall := fake.getStackByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) GetStackByNameReturns(result1 v2action.Stack, result2 v2action.Warnings, result3 error) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = nil
	fake.getStackByNameReturns = struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) GetStackByNameReturnsOnCall(i int, result1 v2action.Stack, result2 v2action.Warnings, result3 error) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = nil
	if fake.getStackByNameReturnsOnCall == nil {
		fake.getStackByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.Stack
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getStackByNameReturnsOnCall[i] = struct {
		result1 v2action.Stack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) MapRouteToApplication(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.mapRouteToApplicationMutex.Lock()
	ret, specificReturn := fake.mapRouteToApplicationReturnsOnCall[len(fake.mapRouteToApplicationArgsForCall)]
	fake.mapRouteToApplicationArgsForCall = append(fake.mapRouteToApplicationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MapRouteToApplicationStub
	fakeReturns := fake.mapRouteToApplicationReturns
	fake.recordInvocation("MapRouteToApplication", []interface{}{arg1, arg2})
	fake.mapRouteToApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV2Actor) MapRouteToApplicationCallCount() int {
	fake.mapRouteToApplicationMutex.RLock()
	defer fake.mapRouteToApplicationMutex.RUnlock()
	return len(fake.mapRouteToApplicationArgsForCall)
}

func (fake *FakeV2Actor) MapRouteToApplicationCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.mapRouteToApplicationMutex.Lock()
	defer fake.mapRouteToApplicationMutex.Unlock()
	fake.MapRouteToApplicationStub = stub
}

func (fake *FakeV2Actor) MapRouteToApplicationArgsForCall(i int) (string, string) {
	fake.mapRouteToApplicationMutex.RLock()
	defer fake.mapRouteToApplicationMutex.RUnlock()
	argsForCall := fake.mapRouteToApplicationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) MapRouteToApplicationReturns(result1 v2action.Warnings, result2 error) {
	fake.mapRouteToApplicationMutex.Lock()
	defer fake.mapRouteToApplicationMutex.Unlock()
	fake.MapRouteToApplicationStub = nil
	fake.mapRouteToApplicationReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) MapRouteToApplicationReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.mapRouteToApplicationMutex.Lock()
	defer fake.mapRouteToApplicationMutex.Unlock()
	fake.MapRouteToApplicationStub = nil
	if fake.mapRouteToApplicationReturnsOnCall == nil {
		fake.mapRouteToApplicationReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.mapRouteToApplicationReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) PollJob(arg1 v2action.Job) (v2action.Warnings, error) {
	fake.pollJobMutex.Lock()
	ret, specificReturn := fake.pollJobReturnsOnCall[len(fake.pollJobArgsForCall)]
	fake.pollJobArgsForCall = append(fake.pollJobArgsForCall, struct {
		arg1 v2action.Job
	}{arg1})
	stub := fake.PollJobStub
	fakeReturns := fake.pollJobReturns
	fake.recordInvocation("PollJob", []interface{}{arg1})
	fake.pollJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV2Actor) PollJobCallCount() int {
	fake.pollJobMutex.RLock()
	defer fake.pollJobMutex.RUnlock()
	return len(fake.pollJobArgsForCall)
}

func (fake *FakeV2Actor) PollJobCalls(stub func(v2action.Job) (v2action.Warnings, error)) {
	fake.pollJobMutex.Lock()
	defer fake.pollJobMutex.Unlock()
	fake.PollJobStub = stub
}

func (fake *FakeV2Actor) PollJobArgsForCall(i int) v2action.Job {
	fake.pollJobMutex.RLock()
	defer fake.pollJobMutex.RUnlock()
	argsForCall := fake.pollJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) PollJobReturns(result1 v2action.Warnings, result2 error) {
	fake.pollJobMutex.Lock()
	defer fake.pollJobMutex.Unlock()
	fake.PollJobStub = nil
	fake.pollJobReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) PollJobReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.pollJobMutex.Lock()
	defer fake.pollJobMutex.Unlock()
	fake.PollJobStub = nil
	if fake.pollJobReturnsOnCall == nil {
		fake.pollJobReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.pollJobReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) ResourceMatch(arg1 []v2action.Resource) ([]v2action.Resource, []v2action.Resource, v2action.Warnings, error) {
	var arg1Copy []v2action.Resource
	if arg1 != nil {
		arg1Copy = make([]v2action.Resource, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.resourceMatchMutex.Lock()
	ret, specificReturn := fake.resourceMatchReturnsOnCall[len(fake.resourceMatchArgsForCall)]
	fake.resourceMatchArgsForCall = append(fake.resourceMatchArgsForCall, struct {
		arg1 []v2action.Resource
	}{arg1Copy})
	stub := fake.ResourceMatchStub
	fakeReturns := fake.resourceMatchReturns
	fake.recordInvocation("ResourceMatch", []interface{}{arg1Copy})
	fake.resourceMatchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeV2Actor) ResourceMatchCallCount() int {
	fake.resourceMatchMutex.RLock()
	defer fake.resourceMatchMutex.RUnlock()
	return len(fake.resourceMatchArgsForCall)
}

func (fake *FakeV2Actor) ResourceMatchCalls(stub func([]v2action.Resource) ([]v2action.Resource, []v2action.Resource, v2action.Warnings, error)) {
	fake.resourceMatchMutex.Lock()
	defer fake.resourceMatchMutex.Unlock()
	fake.ResourceMatchStub = stub
}

func (fake *FakeV2Actor) ResourceMatchArgsForCall(i int) []v2action.Resource {
	fake.resourceMatchMutex.RLock()
	defer fake.resourceMatchMutex.RUnlock()
	argsForCall := fake.resourceMatchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) ResourceMatchReturns(result1 []v2action.Resource, result2 []v2action.Resource, result3 v2action.Warnings, result4 error) {
	fake.resourceMatchMutex.Lock()
	defer fake.resourceMatchMutex.Unlock()
	fake.ResourceMatchStub = nil
	fake.resourceMatchReturns = struct {
		result1 []v2action.Resource
		result2 []v2action.Resource
		result3 v2action.Warnings
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeV2Actor) ResourceMatchReturnsOnCall(i int, result1 []v2action.Resource, result2 []v2action.Resource, result3 v2action.Warnings, result4 error) {
	fake.resourceMatchMutex.Lock()
	defer fake.resourceMatchMutex.Unlock()
	fake.ResourceMatchStub = nil
	if fake.resourceMatchReturnsOnCall == nil {
		fake.resourceMatchReturnsOnCall = make(map[int]struct {
			result1 []v2action.Resource
			result2 []v2action.Resource
			result3 v2action.Warnings
			result4 error
		})
	}
	fake.resourceMatchReturnsOnCall[i] = struct {
		result1 []v2action.Resource
		result2 []v2action.Resource
		result3 v2action.Warnings
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeV2Actor) UnmapRouteFromApplication(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.unmapRouteFromApplicationMutex.Lock()
	ret, specificReturn := fake.unmapRouteFromApplicationReturnsOnCall[len(fake.unmapRouteFromApplicationArgsForCall)]
	fake.unmapRouteFromApplicationArgsForCall = append(fake.unmapRouteFromApplicationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UnmapRouteFromApplicationStub
	fakeReturns := fake.unmapRouteFromApplicationReturns
	fake.recordInvocation("UnmapRouteFromApplication", []interface{}{arg1, arg2})
	fake.unmapRouteFromApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV2Actor) UnmapRouteFromApplicationCallCount() int {
	fake.unmapRouteFromApplicationMutex.RLock()
	defer fake.unmapRouteFromApplicationMutex.RUnlock()
	return len(fake.unmapRouteFromApplicationArgsForCall)
}

func (fake *FakeV2Actor) UnmapRouteFromApplicationCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.unmapRouteFromApplicationMutex.Lock()
	defer fake.unmapRouteFromApplicationMutex.Unlock()
	fake.UnmapRouteFromApplicationStub = stub
}

func (fake *FakeV2Actor) UnmapRouteFromApplicationArgsForCall(i int) (string, string) {
	fake.unmapRouteFromApplicationMutex.RLock()
	defer fake.unmapRouteFromApplicationMutex.RUnlock()
	argsForCall := fake.unmapRouteFromApplicationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV2Actor) UnmapRouteFromApplicationReturns(result1 v2action.Warnings, result2 error) {
	fake.unmapRouteFromApplicationMutex.Lock()
	defer fake.unmapRouteFromApplicationMutex.Unlock()
	fake.UnmapRouteFromApplicationStub = nil
	fake.unmapRouteFromApplicationReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) UnmapRouteFromApplicationReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.unmapRouteFromApplicationMutex.Lock()
	defer fake.unmapRouteFromApplicationMutex.Unlock()
	fake.UnmapRouteFromApplicationStub = nil
	if fake.unmapRouteFromApplicationReturnsOnCall == nil {
		fake.unmapRouteFromApplicationReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.unmapRouteFromApplicationReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV2Actor) UpdateApplication(arg1 v2action.Application) (v2action.Application, v2action.Warnings, error) {
	fake.updateApplicationMutex.Lock()
	ret, specificReturn := fake.updateApplicationReturnsOnCall[len(fake.updateApplicationArgsForCall)]
	fake.updateApplicationArgsForCall = append(fake.updateApplicationArgsForCall, struct {
		arg1 v2action.Application
	}{arg1})
	stub := fake.UpdateApplicationStub
	fakeReturns := fake.updateApplicationReturns
	fake.recordInvocation("UpdateApplication", []interface{}{arg1})
	fake.updateApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) UpdateApplicationCallCount() int {
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	return len(fake.updateApplicationArgsForCall)
}

func (fake *FakeV2Actor) UpdateApplicationCalls(stub func(v2action.Application) (v2action.Application, v2action.Warnings, error)) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = stub
}

func (fake *FakeV2Actor) UpdateApplicationArgsForCall(i int) v2action.Application {
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	argsForCall := fake.updateApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV2Actor) UpdateApplicationReturns(result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = nil
	fake.updateApplicationReturns = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) UpdateApplicationReturnsOnCall(i int, result1 v2action.Application, result2 v2action.Warnings, result3 error) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = nil
	if fake.updateApplicationReturnsOnCall == nil {
		fake.updateApplicationReturnsOnCall = make(map[int]struct {
			result1 v2action.Application
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.updateApplicationReturnsOnCall[i] = struct {
		result1 v2action.Application
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) UploadApplicationPackage(arg1 string, arg2 []v2action.Resource, arg3 io.Reader, arg4 int64) (v2action.Job, v2action.Warnings, error) {
	var arg2Copy []v2action.Resource
	if arg2 != nil {
		arg2Copy = make([]v2action.Resource, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.uploadApplicationPackageMutex.Lock()
	ret, specificReturn := fake.uploadApplicationPackageReturnsOnCall[len(fake.uploadApplicationPackageArgsForCall)]
	fake.uploadApplicationPackageArgsForCall = append(fake.uploadApplicationPackageArgsForCall, struct {
		arg1 string
		arg2 []v2action.Resource
		arg3 io.Reader
		arg4 int64
	}{arg1, arg2Copy, arg3, arg4})
	stub := fake.UploadApplicationPackageStub
	fakeReturns := fake.uploadApplicationPackageReturns
	fake.recordInvocation("UploadApplicationPackage", []interface{}{arg1, arg2Copy, arg3, arg4})
	fake.uploadApplicationPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) UploadApplicationPackageCallCount() int {
	fake.uploadApplicationPackageMutex.RLock()
	defer fake.uploadApplicationPackageMutex.RUnlock()
	return len(fake.uploadApplicationPackageArgsForCall)
}

func (fake *FakeV2Actor) UploadApplicationPackageCalls(stub func(string, []v2action.Resource, io.Reader, int64) (v2action.Job, v2action.Warnings, error)) {
	fake.uploadApplicationPackageMutex.Lock()
	defer fake.uploadApplicationPackageMutex.Unlock()
	fake.UploadApplicationPackageStub = stub
}

func (fake *FakeV2Actor) UploadApplicationPackageArgsForCall(i int) (string, []v2action.Resource, io.Reader, int64) {
	fake.uploadApplicationPackageMutex.RLock()
	defer fake.uploadApplicationPackageMutex.RUnlock()
	argsForCall := fake.uploadApplicationPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeV2Actor) UploadApplicationPackageReturns(result1 v2action.Job, result2 v2action.Warnings, result3 error) {
	fake.uploadApplicationPackageMutex.Lock()
	defer fake.uploadApplicationPackageMutex.Unlock()
	fake.UploadApplicationPackageStub = nil
	fake.uploadApplicationPackageReturns = struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) UploadApplicationPackageReturnsOnCall(i int, result1 v2action.Job, result2 v2action.Warnings, result3 error) {
	fake.uploadApplicationPackageMutex.Lock()
	defer fake.uploadApplicationPackageMutex.Unlock()
	fake.UploadApplicationPackageStub = nil
	if fake.uploadApplicationPackageReturnsOnCall == nil {
		fake.uploadApplicationPackageReturnsOnCall = make(map[int]struct {
			result1 v2action.Job
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.uploadApplicationPackageReturnsOnCall[i] = struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) UploadDroplet(arg1 string, arg2 io.Reader, arg3 int64) (v2action.Job, v2action.Warnings, error) {
	fake.uploadDropletMutex.Lock()
	ret, specificReturn := fake.uploadDropletReturnsOnCall[len(fake.uploadDropletArgsForCall)]
	fake.uploadDropletArgsForCall = append(fake.uploadDropletArgsForCall, struct {
		arg1 string
		arg2 io.Reader
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.UploadDropletStub
	fakeReturns := fake.uploadDropletReturns
	fake.recordInvocation("UploadDroplet", []interface{}{arg1, arg2, arg3})
	fake.uploadDropletMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV2Actor) UploadDropletCallCount() int {
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	return len(fake.uploadDropletArgsForCall)
}

func (fake *FakeV2Actor) UploadDropletCalls(stub func(string, io.Reader, int64) (v2action.Job, v2action.Warnings, error)) {
	fake.uploadDropletMutex.Lock()
	defer fake.uploadDropletMutex.Unlock()
	fake.UploadDropletStub = stub
}

func (fake *FakeV2Actor) UploadDropletArgsForCall(i int) (string, io.Reader, int64) {
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	argsForCall := fake.uploadDropletArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV2Actor) UploadDropletReturns(result1 v2action.Job, result2 v2action.Warnings, result3 error) {
	fake.uploadDropletMutex.Lock()
	defer fake.uploadDropletMutex.Unlock()
	fake.UploadDropletStub = nil
	fake.uploadDropletReturns = struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) UploadDropletReturnsOnCall(i int, result1 v2action.Job, result2 v2action.Warnings, result3 error) {
	fake.uploadDropletMutex.Lock()
	defer fake.uploadDropletMutex.Unlock()
	fake.UploadDropletStub = nil
	if fake.uploadDropletReturnsOnCall == nil {
		fake.uploadDropletReturnsOnCall = make(map[int]struct {
			result1 v2action.Job
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.uploadDropletReturnsOnCall[i] = struct {
		result1 v2action.Job
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2Actor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindServiceByApplicationAndServiceInstanceMutex.RLock()
	defer fake.bindServiceByApplicationAndServiceInstanceMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.createApplicationMutex.RLock()
	defer fake.createApplicationMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.findRouteBoundToSpaceWithSettingsMutex.RLock()
	defer fake.findRouteBoundToSpaceWithSettingsMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.getApplicationRoutesMutex.RLock()
	defer fake.getApplicationRoutesMutex.RUnlock()
	fake.getDomainsByNameAndOrganizationMutex.RLock()
	defer fake.getDomainsByNameAndOrganizationMutex.RUnlock()
	fake.getOrganizationDomainsMutex.RLock()
	defer fake.getOrganizationDomainsMutex.RUnlock()
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	fake.getServiceInstancesByApplicationMutex.RLock()
	defer fake.getServiceInstancesByApplicationMutex.RUnlock()
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	fake.mapRouteToApplicationMutex.RLock()
	defer fake.mapRouteToApplicationMutex.RUnlock()
	fake.pollJobMutex.RLock()
	defer fake.pollJobMutex.RUnlock()
	fake.resourceMatchMutex.RLock()
	defer fake.resourceMatchMutex.RUnlock()
	fake.unmapRouteFromApplicationMutex.RLock()
	defer fake.unmapRouteFromApplicationMutex.RUnlock()
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	fake.uploadApplicationPackageMutex.RLock()
	defer fake.uploadApplicationPackageMutex.RUnlock()
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV2Actor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pushaction.V2Actor = new(FakeV2Actor)
