// Code generated by counterfeiter. DO NOT EDIT.
package rpcfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin/rpc"
)

type FakeTerminalOutputSwitch struct {
	DisableTerminalOutputStub        func(bool)
	disableTerminalOutputMutex       sync.RWMutex
	disableTerminalOutputArgsForCall []struct {
		arg1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTerminalOutputSwitch) DisableTerminalOutput(arg1 bool) {
	fake.disableTerminalOutputMutex.Lock()
	fake.disableTerminalOutputArgsForCall = append(fake.disableTerminalOutputArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("DisableTerminalOutput", []interface{}{arg1})
	fake.disableTerminalOutputMutex.Unlock()
	if fake.DisableTerminalOutputStub != nil {
		fake.DisableTerminalOutputStub(arg1)
	}
}

func (fake *FakeTerminalOutputSwitch) DisableTerminalOutputCallCount() int {
	fake.disableTerminalOutputMutex.RLock()
	defer fake.disableTerminalOutputMutex.RUnlock()
	return len(fake.disableTerminalOutputArgsForCall)
}

func (fake *FakeTerminalOutputSwitch) DisableTerminalOutputCalls(stub func(bool)) {
	fake.disableTerminalOutputMutex.Lock()
	defer fake.disableTerminalOutputMutex.Unlock()
	fake.DisableTerminalOutputStub = stub
}

func (fake *FakeTerminalOutputSwitch) DisableTerminalOutputArgsForCall(i int) bool {
	fake.disableTerminalOutputMutex.RLock()
	defer fake.disableTerminalOutputMutex.RUnlock()
	argsForCall := fake.disableTerminalOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTerminalOutputSwitch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableTerminalOutputMutex.RLock()
	defer fake.disableTerminalOutputMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTerminalOutputSwitch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rpc.TerminalOutputSwitch = new(FakeTerminalOutputSwitch)
