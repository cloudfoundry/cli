// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeDeleteSpaceActor struct {
	DeleteSpaceByNameAndOrganizationNameStub        func(spaceName string, orgName string) (v2action.Warnings, error)
	deleteSpaceByNameAndOrganizationNameMutex       sync.RWMutex
	deleteSpaceByNameAndOrganizationNameArgsForCall []struct {
		spaceName string
		orgName   string
	}
	deleteSpaceByNameAndOrganizationNameReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	deleteSpaceByNameAndOrganizationNameReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteSpaceActor) DeleteSpaceByNameAndOrganizationName(spaceName string, orgName string) (v2action.Warnings, error) {
	fake.deleteSpaceByNameAndOrganizationNameMutex.Lock()
	ret, specificReturn := fake.deleteSpaceByNameAndOrganizationNameReturnsOnCall[len(fake.deleteSpaceByNameAndOrganizationNameArgsForCall)]
	fake.deleteSpaceByNameAndOrganizationNameArgsForCall = append(fake.deleteSpaceByNameAndOrganizationNameArgsForCall, struct {
		spaceName string
		orgName   string
	}{spaceName, orgName})
	fake.recordInvocation("DeleteSpaceByNameAndOrganizationName", []interface{}{spaceName, orgName})
	fake.deleteSpaceByNameAndOrganizationNameMutex.Unlock()
	if fake.DeleteSpaceByNameAndOrganizationNameStub != nil {
		return fake.DeleteSpaceByNameAndOrganizationNameStub(spaceName, orgName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSpaceByNameAndOrganizationNameReturns.result1, fake.deleteSpaceByNameAndOrganizationNameReturns.result2
}

func (fake *FakeDeleteSpaceActor) DeleteSpaceByNameAndOrganizationNameCallCount() int {
	fake.deleteSpaceByNameAndOrganizationNameMutex.RLock()
	defer fake.deleteSpaceByNameAndOrganizationNameMutex.RUnlock()
	return len(fake.deleteSpaceByNameAndOrganizationNameArgsForCall)
}

func (fake *FakeDeleteSpaceActor) DeleteSpaceByNameAndOrganizationNameArgsForCall(i int) (string, string) {
	fake.deleteSpaceByNameAndOrganizationNameMutex.RLock()
	defer fake.deleteSpaceByNameAndOrganizationNameMutex.RUnlock()
	return fake.deleteSpaceByNameAndOrganizationNameArgsForCall[i].spaceName, fake.deleteSpaceByNameAndOrganizationNameArgsForCall[i].orgName
}

func (fake *FakeDeleteSpaceActor) DeleteSpaceByNameAndOrganizationNameReturns(result1 v2action.Warnings, result2 error) {
	fake.DeleteSpaceByNameAndOrganizationNameStub = nil
	fake.deleteSpaceByNameAndOrganizationNameReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteSpaceActor) DeleteSpaceByNameAndOrganizationNameReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.DeleteSpaceByNameAndOrganizationNameStub = nil
	if fake.deleteSpaceByNameAndOrganizationNameReturnsOnCall == nil {
		fake.deleteSpaceByNameAndOrganizationNameReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.deleteSpaceByNameAndOrganizationNameReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteSpaceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteSpaceByNameAndOrganizationNameMutex.RLock()
	defer fake.deleteSpaceByNameAndOrganizationNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteSpaceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.DeleteSpaceActor = new(FakeDeleteSpaceActor)
