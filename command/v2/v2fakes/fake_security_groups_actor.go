// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeSecurityGroupsActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetSecurityGroupsWithOrganizationSpaceAndLifecycleStub        func(includeStaging bool) ([]v2action.SecurityGroupWithOrganizationSpaceAndLifecycle, v2action.Warnings, error)
	getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex       sync.RWMutex
	getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall []struct {
		includeStaging bool
	}
	getSecurityGroupsWithOrganizationSpaceAndLifecycleReturns struct {
		result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle
		result2 v2action.Warnings
		result3 error
	}
	getSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall map[int]struct {
		result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityGroupsActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeSecurityGroupsActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeSecurityGroupsActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSecurityGroupsActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationSpaceAndLifecycle(includeStaging bool) ([]v2action.SecurityGroupWithOrganizationSpaceAndLifecycle, v2action.Warnings, error) {
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.Lock()
	ret, specificReturn := fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall[len(fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall)]
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall = append(fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall, struct {
		includeStaging bool
	}{includeStaging})
	fake.recordInvocation("GetSecurityGroupsWithOrganizationSpaceAndLifecycle", []interface{}{includeStaging})
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.Unlock()
	if fake.GetSecurityGroupsWithOrganizationSpaceAndLifecycleStub != nil {
		return fake.GetSecurityGroupsWithOrganizationSpaceAndLifecycleStub(includeStaging)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturns.result1, fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturns.result2, fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturns.result3
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationSpaceAndLifecycleCallCount() int {
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RLock()
	defer fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RUnlock()
	return len(fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall)
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall(i int) bool {
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RLock()
	defer fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RUnlock()
	return fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleArgsForCall[i].includeStaging
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationSpaceAndLifecycleReturns(result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle, result2 v2action.Warnings, result3 error) {
	fake.GetSecurityGroupsWithOrganizationSpaceAndLifecycleStub = nil
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturns = struct {
		result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall(i int, result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle, result2 v2action.Warnings, result3 error) {
	fake.GetSecurityGroupsWithOrganizationSpaceAndLifecycleStub = nil
	if fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall == nil {
		fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall = make(map[int]struct {
			result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleReturnsOnCall[i] = struct {
		result1 []v2action.SecurityGroupWithOrganizationSpaceAndLifecycle
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RLock()
	defer fake.getSecurityGroupsWithOrganizationSpaceAndLifecycleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityGroupsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.SecurityGroupsActor = new(FakeSecurityGroupsActor)
