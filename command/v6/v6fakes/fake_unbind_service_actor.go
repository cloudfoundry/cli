// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/v2action"
	v6 "code.cloudfoundry.org/cli/v7/command/v6"
)

type FakeUnbindServiceActor struct {
	UnbindServiceBySpaceStub        func(string, string, string) (v2action.ServiceBinding, v2action.Warnings, error)
	unbindServiceBySpaceMutex       sync.RWMutex
	unbindServiceBySpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	unbindServiceBySpaceReturns struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}
	unbindServiceBySpaceReturnsOnCall map[int]struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpace(arg1 string, arg2 string, arg3 string) (v2action.ServiceBinding, v2action.Warnings, error) {
	fake.unbindServiceBySpaceMutex.Lock()
	ret, specificReturn := fake.unbindServiceBySpaceReturnsOnCall[len(fake.unbindServiceBySpaceArgsForCall)]
	fake.unbindServiceBySpaceArgsForCall = append(fake.unbindServiceBySpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("UnbindServiceBySpace", []interface{}{arg1, arg2, arg3})
	fake.unbindServiceBySpaceMutex.Unlock()
	if fake.UnbindServiceBySpaceStub != nil {
		return fake.UnbindServiceBySpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.unbindServiceBySpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceCallCount() int {
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	return len(fake.unbindServiceBySpaceArgsForCall)
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceCalls(stub func(string, string, string) (v2action.ServiceBinding, v2action.Warnings, error)) {
	fake.unbindServiceBySpaceMutex.Lock()
	defer fake.unbindServiceBySpaceMutex.Unlock()
	fake.UnbindServiceBySpaceStub = stub
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceArgsForCall(i int) (string, string, string) {
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	argsForCall := fake.unbindServiceBySpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceReturns(result1 v2action.ServiceBinding, result2 v2action.Warnings, result3 error) {
	fake.unbindServiceBySpaceMutex.Lock()
	defer fake.unbindServiceBySpaceMutex.Unlock()
	fake.UnbindServiceBySpaceStub = nil
	fake.unbindServiceBySpaceReturns = struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceReturnsOnCall(i int, result1 v2action.ServiceBinding, result2 v2action.Warnings, result3 error) {
	fake.unbindServiceBySpaceMutex.Lock()
	defer fake.unbindServiceBySpaceMutex.Unlock()
	fake.UnbindServiceBySpaceStub = nil
	if fake.unbindServiceBySpaceReturnsOnCall == nil {
		fake.unbindServiceBySpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceBinding
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.unbindServiceBySpaceReturnsOnCall[i] = struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUnbindServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnbindServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.UnbindServiceActor = new(FakeUnbindServiceActor)
