// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeDisableServiceAccessActor struct {
	DisablePlanForAllOrgsStub        func(string, string) (v2action.Warnings, error)
	disablePlanForAllOrgsMutex       sync.RWMutex
	disablePlanForAllOrgsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	disablePlanForAllOrgsReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	disablePlanForAllOrgsReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	DisablePlanForOrgStub        func(string, string, string) (v2action.Warnings, error)
	disablePlanForOrgMutex       sync.RWMutex
	disablePlanForOrgArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	disablePlanForOrgReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	disablePlanForOrgReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	DisableServiceForAllOrgsStub        func(string) (v2action.Warnings, error)
	disableServiceForAllOrgsMutex       sync.RWMutex
	disableServiceForAllOrgsArgsForCall []struct {
		arg1 string
	}
	disableServiceForAllOrgsReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	disableServiceForAllOrgsReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	DisableServiceForOrgStub        func(string, string) (v2action.Warnings, error)
	disableServiceForOrgMutex       sync.RWMutex
	disableServiceForOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	disableServiceForOrgReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	disableServiceForOrgReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgs(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.disablePlanForAllOrgsMutex.Lock()
	ret, specificReturn := fake.disablePlanForAllOrgsReturnsOnCall[len(fake.disablePlanForAllOrgsArgsForCall)]
	fake.disablePlanForAllOrgsArgsForCall = append(fake.disablePlanForAllOrgsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DisablePlanForAllOrgs", []interface{}{arg1, arg2})
	fake.disablePlanForAllOrgsMutex.Unlock()
	if fake.DisablePlanForAllOrgsStub != nil {
		return fake.DisablePlanForAllOrgsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disablePlanForAllOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgsCallCount() int {
	fake.disablePlanForAllOrgsMutex.RLock()
	defer fake.disablePlanForAllOrgsMutex.RUnlock()
	return len(fake.disablePlanForAllOrgsArgsForCall)
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgsCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.disablePlanForAllOrgsMutex.Lock()
	defer fake.disablePlanForAllOrgsMutex.Unlock()
	fake.DisablePlanForAllOrgsStub = stub
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgsArgsForCall(i int) (string, string) {
	fake.disablePlanForAllOrgsMutex.RLock()
	defer fake.disablePlanForAllOrgsMutex.RUnlock()
	argsForCall := fake.disablePlanForAllOrgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgsReturns(result1 v2action.Warnings, result2 error) {
	fake.disablePlanForAllOrgsMutex.Lock()
	defer fake.disablePlanForAllOrgsMutex.Unlock()
	fake.DisablePlanForAllOrgsStub = nil
	fake.disablePlanForAllOrgsReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForAllOrgsReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.disablePlanForAllOrgsMutex.Lock()
	defer fake.disablePlanForAllOrgsMutex.Unlock()
	fake.DisablePlanForAllOrgsStub = nil
	if fake.disablePlanForAllOrgsReturnsOnCall == nil {
		fake.disablePlanForAllOrgsReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.disablePlanForAllOrgsReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrg(arg1 string, arg2 string, arg3 string) (v2action.Warnings, error) {
	fake.disablePlanForOrgMutex.Lock()
	ret, specificReturn := fake.disablePlanForOrgReturnsOnCall[len(fake.disablePlanForOrgArgsForCall)]
	fake.disablePlanForOrgArgsForCall = append(fake.disablePlanForOrgArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisablePlanForOrg", []interface{}{arg1, arg2, arg3})
	fake.disablePlanForOrgMutex.Unlock()
	if fake.DisablePlanForOrgStub != nil {
		return fake.DisablePlanForOrgStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disablePlanForOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrgCallCount() int {
	fake.disablePlanForOrgMutex.RLock()
	defer fake.disablePlanForOrgMutex.RUnlock()
	return len(fake.disablePlanForOrgArgsForCall)
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrgCalls(stub func(string, string, string) (v2action.Warnings, error)) {
	fake.disablePlanForOrgMutex.Lock()
	defer fake.disablePlanForOrgMutex.Unlock()
	fake.DisablePlanForOrgStub = stub
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrgArgsForCall(i int) (string, string, string) {
	fake.disablePlanForOrgMutex.RLock()
	defer fake.disablePlanForOrgMutex.RUnlock()
	argsForCall := fake.disablePlanForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrgReturns(result1 v2action.Warnings, result2 error) {
	fake.disablePlanForOrgMutex.Lock()
	defer fake.disablePlanForOrgMutex.Unlock()
	fake.DisablePlanForOrgStub = nil
	fake.disablePlanForOrgReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisablePlanForOrgReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.disablePlanForOrgMutex.Lock()
	defer fake.disablePlanForOrgMutex.Unlock()
	fake.DisablePlanForOrgStub = nil
	if fake.disablePlanForOrgReturnsOnCall == nil {
		fake.disablePlanForOrgReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.disablePlanForOrgReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgs(arg1 string) (v2action.Warnings, error) {
	fake.disableServiceForAllOrgsMutex.Lock()
	ret, specificReturn := fake.disableServiceForAllOrgsReturnsOnCall[len(fake.disableServiceForAllOrgsArgsForCall)]
	fake.disableServiceForAllOrgsArgsForCall = append(fake.disableServiceForAllOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DisableServiceForAllOrgs", []interface{}{arg1})
	fake.disableServiceForAllOrgsMutex.Unlock()
	if fake.DisableServiceForAllOrgsStub != nil {
		return fake.DisableServiceForAllOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableServiceForAllOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgsCallCount() int {
	fake.disableServiceForAllOrgsMutex.RLock()
	defer fake.disableServiceForAllOrgsMutex.RUnlock()
	return len(fake.disableServiceForAllOrgsArgsForCall)
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgsCalls(stub func(string) (v2action.Warnings, error)) {
	fake.disableServiceForAllOrgsMutex.Lock()
	defer fake.disableServiceForAllOrgsMutex.Unlock()
	fake.DisableServiceForAllOrgsStub = stub
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgsArgsForCall(i int) string {
	fake.disableServiceForAllOrgsMutex.RLock()
	defer fake.disableServiceForAllOrgsMutex.RUnlock()
	argsForCall := fake.disableServiceForAllOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgsReturns(result1 v2action.Warnings, result2 error) {
	fake.disableServiceForAllOrgsMutex.Lock()
	defer fake.disableServiceForAllOrgsMutex.Unlock()
	fake.DisableServiceForAllOrgsStub = nil
	fake.disableServiceForAllOrgsReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForAllOrgsReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.disableServiceForAllOrgsMutex.Lock()
	defer fake.disableServiceForAllOrgsMutex.Unlock()
	fake.DisableServiceForAllOrgsStub = nil
	if fake.disableServiceForAllOrgsReturnsOnCall == nil {
		fake.disableServiceForAllOrgsReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.disableServiceForAllOrgsReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrg(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.disableServiceForOrgMutex.Lock()
	ret, specificReturn := fake.disableServiceForOrgReturnsOnCall[len(fake.disableServiceForOrgArgsForCall)]
	fake.disableServiceForOrgArgsForCall = append(fake.disableServiceForOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DisableServiceForOrg", []interface{}{arg1, arg2})
	fake.disableServiceForOrgMutex.Unlock()
	if fake.DisableServiceForOrgStub != nil {
		return fake.DisableServiceForOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableServiceForOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrgCallCount() int {
	fake.disableServiceForOrgMutex.RLock()
	defer fake.disableServiceForOrgMutex.RUnlock()
	return len(fake.disableServiceForOrgArgsForCall)
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrgCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.disableServiceForOrgMutex.Lock()
	defer fake.disableServiceForOrgMutex.Unlock()
	fake.DisableServiceForOrgStub = stub
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrgArgsForCall(i int) (string, string) {
	fake.disableServiceForOrgMutex.RLock()
	defer fake.disableServiceForOrgMutex.RUnlock()
	argsForCall := fake.disableServiceForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrgReturns(result1 v2action.Warnings, result2 error) {
	fake.disableServiceForOrgMutex.Lock()
	defer fake.disableServiceForOrgMutex.Unlock()
	fake.DisableServiceForOrgStub = nil
	fake.disableServiceForOrgReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) DisableServiceForOrgReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.disableServiceForOrgMutex.Lock()
	defer fake.disableServiceForOrgMutex.Unlock()
	fake.DisableServiceForOrgStub = nil
	if fake.disableServiceForOrgReturnsOnCall == nil {
		fake.disableServiceForOrgReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.disableServiceForOrgReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableServiceAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disablePlanForAllOrgsMutex.RLock()
	defer fake.disablePlanForAllOrgsMutex.RUnlock()
	fake.disablePlanForOrgMutex.RLock()
	defer fake.disablePlanForOrgMutex.RUnlock()
	fake.disableServiceForAllOrgsMutex.RLock()
	defer fake.disableServiceForAllOrgsMutex.RUnlock()
	fake.disableServiceForOrgMutex.RLock()
	defer fake.disableServiceForOrgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDisableServiceAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.DisableServiceAccessActor = new(FakeDisableServiceAccessActor)
