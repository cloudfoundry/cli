// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v6"
)

type FakeServicesSummariesActor struct {
	GetServicesSummariesStub        func() ([]v2action.ServiceSummary, v2action.Warnings, error)
	getServicesSummariesMutex       sync.RWMutex
	getServicesSummariesArgsForCall []struct{}
	getServicesSummariesReturns     struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	getServicesSummariesReturnsOnCall map[int]struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	GetServicesSummariesForSpaceStub        func(spaceGUID string) ([]v2action.ServiceSummary, v2action.Warnings, error)
	getServicesSummariesForSpaceMutex       sync.RWMutex
	getServicesSummariesForSpaceArgsForCall []struct {
		spaceGUID string
	}
	getServicesSummariesForSpaceReturns struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	getServicesSummariesForSpaceReturnsOnCall map[int]struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	GetServiceSummaryByNameStub        func(serviceName string) (v2action.ServiceSummary, v2action.Warnings, error)
	getServiceSummaryByNameMutex       sync.RWMutex
	getServiceSummaryByNameArgsForCall []struct {
		serviceName string
	}
	getServiceSummaryByNameReturns struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	getServiceSummaryByNameReturnsOnCall map[int]struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	GetServiceSummaryForSpaceByNameStub        func(spaceGUID, serviceName string) (v2action.ServiceSummary, v2action.Warnings, error)
	getServiceSummaryForSpaceByNameMutex       sync.RWMutex
	getServiceSummaryForSpaceByNameArgsForCall []struct {
		spaceGUID   string
		serviceName string
	}
	getServiceSummaryForSpaceByNameReturns struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	getServiceSummaryForSpaceByNameReturnsOnCall map[int]struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServicesSummariesActor) GetServicesSummaries() ([]v2action.ServiceSummary, v2action.Warnings, error) {
	fake.getServicesSummariesMutex.Lock()
	ret, specificReturn := fake.getServicesSummariesReturnsOnCall[len(fake.getServicesSummariesArgsForCall)]
	fake.getServicesSummariesArgsForCall = append(fake.getServicesSummariesArgsForCall, struct{}{})
	fake.recordInvocation("GetServicesSummaries", []interface{}{})
	fake.getServicesSummariesMutex.Unlock()
	if fake.GetServicesSummariesStub != nil {
		return fake.GetServicesSummariesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServicesSummariesReturns.result1, fake.getServicesSummariesReturns.result2, fake.getServicesSummariesReturns.result3
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesCallCount() int {
	fake.getServicesSummariesMutex.RLock()
	defer fake.getServicesSummariesMutex.RUnlock()
	return len(fake.getServicesSummariesArgsForCall)
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesReturns(result1 []v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServicesSummariesStub = nil
	fake.getServicesSummariesReturns = struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesReturnsOnCall(i int, result1 []v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServicesSummariesStub = nil
	if fake.getServicesSummariesReturnsOnCall == nil {
		fake.getServicesSummariesReturnsOnCall = make(map[int]struct {
			result1 []v2action.ServiceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServicesSummariesReturnsOnCall[i] = struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesForSpace(spaceGUID string) ([]v2action.ServiceSummary, v2action.Warnings, error) {
	fake.getServicesSummariesForSpaceMutex.Lock()
	ret, specificReturn := fake.getServicesSummariesForSpaceReturnsOnCall[len(fake.getServicesSummariesForSpaceArgsForCall)]
	fake.getServicesSummariesForSpaceArgsForCall = append(fake.getServicesSummariesForSpaceArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("GetServicesSummariesForSpace", []interface{}{spaceGUID})
	fake.getServicesSummariesForSpaceMutex.Unlock()
	if fake.GetServicesSummariesForSpaceStub != nil {
		return fake.GetServicesSummariesForSpaceStub(spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServicesSummariesForSpaceReturns.result1, fake.getServicesSummariesForSpaceReturns.result2, fake.getServicesSummariesForSpaceReturns.result3
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesForSpaceCallCount() int {
	fake.getServicesSummariesForSpaceMutex.RLock()
	defer fake.getServicesSummariesForSpaceMutex.RUnlock()
	return len(fake.getServicesSummariesForSpaceArgsForCall)
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesForSpaceArgsForCall(i int) string {
	fake.getServicesSummariesForSpaceMutex.RLock()
	defer fake.getServicesSummariesForSpaceMutex.RUnlock()
	return fake.getServicesSummariesForSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesForSpaceReturns(result1 []v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServicesSummariesForSpaceStub = nil
	fake.getServicesSummariesForSpaceReturns = struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServicesSummariesForSpaceReturnsOnCall(i int, result1 []v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServicesSummariesForSpaceStub = nil
	if fake.getServicesSummariesForSpaceReturnsOnCall == nil {
		fake.getServicesSummariesForSpaceReturnsOnCall = make(map[int]struct {
			result1 []v2action.ServiceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServicesSummariesForSpaceReturnsOnCall[i] = struct {
		result1 []v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryByName(serviceName string) (v2action.ServiceSummary, v2action.Warnings, error) {
	fake.getServiceSummaryByNameMutex.Lock()
	ret, specificReturn := fake.getServiceSummaryByNameReturnsOnCall[len(fake.getServiceSummaryByNameArgsForCall)]
	fake.getServiceSummaryByNameArgsForCall = append(fake.getServiceSummaryByNameArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("GetServiceSummaryByName", []interface{}{serviceName})
	fake.getServiceSummaryByNameMutex.Unlock()
	if fake.GetServiceSummaryByNameStub != nil {
		return fake.GetServiceSummaryByNameStub(serviceName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServiceSummaryByNameReturns.result1, fake.getServiceSummaryByNameReturns.result2, fake.getServiceSummaryByNameReturns.result3
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryByNameCallCount() int {
	fake.getServiceSummaryByNameMutex.RLock()
	defer fake.getServiceSummaryByNameMutex.RUnlock()
	return len(fake.getServiceSummaryByNameArgsForCall)
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryByNameArgsForCall(i int) string {
	fake.getServiceSummaryByNameMutex.RLock()
	defer fake.getServiceSummaryByNameMutex.RUnlock()
	return fake.getServiceSummaryByNameArgsForCall[i].serviceName
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryByNameReturns(result1 v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceSummaryByNameStub = nil
	fake.getServiceSummaryByNameReturns = struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryByNameReturnsOnCall(i int, result1 v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceSummaryByNameStub = nil
	if fake.getServiceSummaryByNameReturnsOnCall == nil {
		fake.getServiceSummaryByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceSummaryByNameReturnsOnCall[i] = struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryForSpaceByName(spaceGUID string, serviceName string) (v2action.ServiceSummary, v2action.Warnings, error) {
	fake.getServiceSummaryForSpaceByNameMutex.Lock()
	ret, specificReturn := fake.getServiceSummaryForSpaceByNameReturnsOnCall[len(fake.getServiceSummaryForSpaceByNameArgsForCall)]
	fake.getServiceSummaryForSpaceByNameArgsForCall = append(fake.getServiceSummaryForSpaceByNameArgsForCall, struct {
		spaceGUID   string
		serviceName string
	}{spaceGUID, serviceName})
	fake.recordInvocation("GetServiceSummaryForSpaceByName", []interface{}{spaceGUID, serviceName})
	fake.getServiceSummaryForSpaceByNameMutex.Unlock()
	if fake.GetServiceSummaryForSpaceByNameStub != nil {
		return fake.GetServiceSummaryForSpaceByNameStub(spaceGUID, serviceName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServiceSummaryForSpaceByNameReturns.result1, fake.getServiceSummaryForSpaceByNameReturns.result2, fake.getServiceSummaryForSpaceByNameReturns.result3
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryForSpaceByNameCallCount() int {
	fake.getServiceSummaryForSpaceByNameMutex.RLock()
	defer fake.getServiceSummaryForSpaceByNameMutex.RUnlock()
	return len(fake.getServiceSummaryForSpaceByNameArgsForCall)
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryForSpaceByNameArgsForCall(i int) (string, string) {
	fake.getServiceSummaryForSpaceByNameMutex.RLock()
	defer fake.getServiceSummaryForSpaceByNameMutex.RUnlock()
	return fake.getServiceSummaryForSpaceByNameArgsForCall[i].spaceGUID, fake.getServiceSummaryForSpaceByNameArgsForCall[i].serviceName
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryForSpaceByNameReturns(result1 v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceSummaryForSpaceByNameStub = nil
	fake.getServiceSummaryForSpaceByNameReturns = struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) GetServiceSummaryForSpaceByNameReturnsOnCall(i int, result1 v2action.ServiceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceSummaryForSpaceByNameStub = nil
	if fake.getServiceSummaryForSpaceByNameReturnsOnCall == nil {
		fake.getServiceSummaryForSpaceByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceSummaryForSpaceByNameReturnsOnCall[i] = struct {
		result1 v2action.ServiceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServicesSummariesActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServicesSummariesMutex.RLock()
	defer fake.getServicesSummariesMutex.RUnlock()
	fake.getServicesSummariesForSpaceMutex.RLock()
	defer fake.getServicesSummariesForSpaceMutex.RUnlock()
	fake.getServiceSummaryByNameMutex.RLock()
	defer fake.getServiceSummaryByNameMutex.RUnlock()
	fake.getServiceSummaryForSpaceByNameMutex.RLock()
	defer fake.getServiceSummaryForSpaceByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServicesSummariesActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.ServicesSummariesActor = new(FakeServicesSummariesActor)
