// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeEnableServiceAccessActor struct {
	EnablePlanForAllOrgsStub        func(string, string) (v2action.Warnings, error)
	enablePlanForAllOrgsMutex       sync.RWMutex
	enablePlanForAllOrgsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	enablePlanForAllOrgsReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	enablePlanForAllOrgsReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	EnablePlanForOrgStub        func(string, string, string) (v2action.Warnings, error)
	enablePlanForOrgMutex       sync.RWMutex
	enablePlanForOrgArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	enablePlanForOrgReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	enablePlanForOrgReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	EnableServiceForAllOrgsStub        func(string) (v2action.Warnings, error)
	enableServiceForAllOrgsMutex       sync.RWMutex
	enableServiceForAllOrgsArgsForCall []struct {
		arg1 string
	}
	enableServiceForAllOrgsReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	enableServiceForAllOrgsReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	EnableServiceForOrgStub        func(string, string) (v2action.Warnings, error)
	enableServiceForOrgMutex       sync.RWMutex
	enableServiceForOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	enableServiceForOrgReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	enableServiceForOrgReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgs(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.enablePlanForAllOrgsMutex.Lock()
	ret, specificReturn := fake.enablePlanForAllOrgsReturnsOnCall[len(fake.enablePlanForAllOrgsArgsForCall)]
	fake.enablePlanForAllOrgsArgsForCall = append(fake.enablePlanForAllOrgsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("EnablePlanForAllOrgs", []interface{}{arg1, arg2})
	fake.enablePlanForAllOrgsMutex.Unlock()
	if fake.EnablePlanForAllOrgsStub != nil {
		return fake.EnablePlanForAllOrgsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enablePlanForAllOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgsCallCount() int {
	fake.enablePlanForAllOrgsMutex.RLock()
	defer fake.enablePlanForAllOrgsMutex.RUnlock()
	return len(fake.enablePlanForAllOrgsArgsForCall)
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgsCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.enablePlanForAllOrgsMutex.Lock()
	defer fake.enablePlanForAllOrgsMutex.Unlock()
	fake.EnablePlanForAllOrgsStub = stub
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgsArgsForCall(i int) (string, string) {
	fake.enablePlanForAllOrgsMutex.RLock()
	defer fake.enablePlanForAllOrgsMutex.RUnlock()
	argsForCall := fake.enablePlanForAllOrgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgsReturns(result1 v2action.Warnings, result2 error) {
	fake.enablePlanForAllOrgsMutex.Lock()
	defer fake.enablePlanForAllOrgsMutex.Unlock()
	fake.EnablePlanForAllOrgsStub = nil
	fake.enablePlanForAllOrgsReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForAllOrgsReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.enablePlanForAllOrgsMutex.Lock()
	defer fake.enablePlanForAllOrgsMutex.Unlock()
	fake.EnablePlanForAllOrgsStub = nil
	if fake.enablePlanForAllOrgsReturnsOnCall == nil {
		fake.enablePlanForAllOrgsReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.enablePlanForAllOrgsReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrg(arg1 string, arg2 string, arg3 string) (v2action.Warnings, error) {
	fake.enablePlanForOrgMutex.Lock()
	ret, specificReturn := fake.enablePlanForOrgReturnsOnCall[len(fake.enablePlanForOrgArgsForCall)]
	fake.enablePlanForOrgArgsForCall = append(fake.enablePlanForOrgArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnablePlanForOrg", []interface{}{arg1, arg2, arg3})
	fake.enablePlanForOrgMutex.Unlock()
	if fake.EnablePlanForOrgStub != nil {
		return fake.EnablePlanForOrgStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enablePlanForOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrgCallCount() int {
	fake.enablePlanForOrgMutex.RLock()
	defer fake.enablePlanForOrgMutex.RUnlock()
	return len(fake.enablePlanForOrgArgsForCall)
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrgCalls(stub func(string, string, string) (v2action.Warnings, error)) {
	fake.enablePlanForOrgMutex.Lock()
	defer fake.enablePlanForOrgMutex.Unlock()
	fake.EnablePlanForOrgStub = stub
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrgArgsForCall(i int) (string, string, string) {
	fake.enablePlanForOrgMutex.RLock()
	defer fake.enablePlanForOrgMutex.RUnlock()
	argsForCall := fake.enablePlanForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrgReturns(result1 v2action.Warnings, result2 error) {
	fake.enablePlanForOrgMutex.Lock()
	defer fake.enablePlanForOrgMutex.Unlock()
	fake.EnablePlanForOrgStub = nil
	fake.enablePlanForOrgReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnablePlanForOrgReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.enablePlanForOrgMutex.Lock()
	defer fake.enablePlanForOrgMutex.Unlock()
	fake.EnablePlanForOrgStub = nil
	if fake.enablePlanForOrgReturnsOnCall == nil {
		fake.enablePlanForOrgReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.enablePlanForOrgReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgs(arg1 string) (v2action.Warnings, error) {
	fake.enableServiceForAllOrgsMutex.Lock()
	ret, specificReturn := fake.enableServiceForAllOrgsReturnsOnCall[len(fake.enableServiceForAllOrgsArgsForCall)]
	fake.enableServiceForAllOrgsArgsForCall = append(fake.enableServiceForAllOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EnableServiceForAllOrgs", []interface{}{arg1})
	fake.enableServiceForAllOrgsMutex.Unlock()
	if fake.EnableServiceForAllOrgsStub != nil {
		return fake.EnableServiceForAllOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableServiceForAllOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgsCallCount() int {
	fake.enableServiceForAllOrgsMutex.RLock()
	defer fake.enableServiceForAllOrgsMutex.RUnlock()
	return len(fake.enableServiceForAllOrgsArgsForCall)
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgsCalls(stub func(string) (v2action.Warnings, error)) {
	fake.enableServiceForAllOrgsMutex.Lock()
	defer fake.enableServiceForAllOrgsMutex.Unlock()
	fake.EnableServiceForAllOrgsStub = stub
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgsArgsForCall(i int) string {
	fake.enableServiceForAllOrgsMutex.RLock()
	defer fake.enableServiceForAllOrgsMutex.RUnlock()
	argsForCall := fake.enableServiceForAllOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgsReturns(result1 v2action.Warnings, result2 error) {
	fake.enableServiceForAllOrgsMutex.Lock()
	defer fake.enableServiceForAllOrgsMutex.Unlock()
	fake.EnableServiceForAllOrgsStub = nil
	fake.enableServiceForAllOrgsReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForAllOrgsReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.enableServiceForAllOrgsMutex.Lock()
	defer fake.enableServiceForAllOrgsMutex.Unlock()
	fake.EnableServiceForAllOrgsStub = nil
	if fake.enableServiceForAllOrgsReturnsOnCall == nil {
		fake.enableServiceForAllOrgsReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.enableServiceForAllOrgsReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrg(arg1 string, arg2 string) (v2action.Warnings, error) {
	fake.enableServiceForOrgMutex.Lock()
	ret, specificReturn := fake.enableServiceForOrgReturnsOnCall[len(fake.enableServiceForOrgArgsForCall)]
	fake.enableServiceForOrgArgsForCall = append(fake.enableServiceForOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("EnableServiceForOrg", []interface{}{arg1, arg2})
	fake.enableServiceForOrgMutex.Unlock()
	if fake.EnableServiceForOrgStub != nil {
		return fake.EnableServiceForOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableServiceForOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrgCallCount() int {
	fake.enableServiceForOrgMutex.RLock()
	defer fake.enableServiceForOrgMutex.RUnlock()
	return len(fake.enableServiceForOrgArgsForCall)
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrgCalls(stub func(string, string) (v2action.Warnings, error)) {
	fake.enableServiceForOrgMutex.Lock()
	defer fake.enableServiceForOrgMutex.Unlock()
	fake.EnableServiceForOrgStub = stub
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrgArgsForCall(i int) (string, string) {
	fake.enableServiceForOrgMutex.RLock()
	defer fake.enableServiceForOrgMutex.RUnlock()
	argsForCall := fake.enableServiceForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrgReturns(result1 v2action.Warnings, result2 error) {
	fake.enableServiceForOrgMutex.Lock()
	defer fake.enableServiceForOrgMutex.Unlock()
	fake.EnableServiceForOrgStub = nil
	fake.enableServiceForOrgReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) EnableServiceForOrgReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.enableServiceForOrgMutex.Lock()
	defer fake.enableServiceForOrgMutex.Unlock()
	fake.EnableServiceForOrgStub = nil
	if fake.enableServiceForOrgReturnsOnCall == nil {
		fake.enableServiceForOrgReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.enableServiceForOrgReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableServiceAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enablePlanForAllOrgsMutex.RLock()
	defer fake.enablePlanForAllOrgsMutex.RUnlock()
	fake.enablePlanForOrgMutex.RLock()
	defer fake.enablePlanForOrgMutex.RUnlock()
	fake.enableServiceForAllOrgsMutex.RLock()
	defer fake.enableServiceForAllOrgsMutex.RUnlock()
	fake.enableServiceForOrgMutex.RLock()
	defer fake.enableServiceForOrgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnableServiceAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.EnableServiceAccessActor = new(FakeEnableServiceAccessActor)
