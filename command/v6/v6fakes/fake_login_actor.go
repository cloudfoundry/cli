// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/api/uaa/constant"
	"code.cloudfoundry.org/cli/cf/configuration/coreconfig"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeLoginActor struct {
	AuthenticateStub        func(map[string]string, string, constant.GrantType) error
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		arg1 map[string]string
		arg2 string
		arg3 constant.GrantType
	}
	authenticateReturns struct {
		result1 error
	}
	authenticateReturnsOnCall map[int]struct {
		result1 error
	}
	GetLoginPromptsStub        func() map[string]coreconfig.AuthPrompt
	getLoginPromptsMutex       sync.RWMutex
	getLoginPromptsArgsForCall []struct {
	}
	getLoginPromptsReturns struct {
		result1 map[string]coreconfig.AuthPrompt
	}
	getLoginPromptsReturnsOnCall map[int]struct {
		result1 map[string]coreconfig.AuthPrompt
	}
	GetOrganizationByNameStub        func(string) (v3action.Organization, v3action.Warnings, error)
	getOrganizationByNameMutex       sync.RWMutex
	getOrganizationByNameArgsForCall []struct {
		arg1 string
	}
	getOrganizationByNameReturns struct {
		result1 v3action.Organization
		result2 v3action.Warnings
		result3 error
	}
	getOrganizationByNameReturnsOnCall map[int]struct {
		result1 v3action.Organization
		result2 v3action.Warnings
		result3 error
	}
	GetOrganizationSpacesStub        func(string) ([]v3action.Space, v3action.Warnings, error)
	getOrganizationSpacesMutex       sync.RWMutex
	getOrganizationSpacesArgsForCall []struct {
		arg1 string
	}
	getOrganizationSpacesReturns struct {
		result1 []v3action.Space
		result2 v3action.Warnings
		result3 error
	}
	getOrganizationSpacesReturnsOnCall map[int]struct {
		result1 []v3action.Space
		result2 v3action.Warnings
		result3 error
	}
	GetOrganizationsStub        func() ([]v3action.Organization, v3action.Warnings, error)
	getOrganizationsMutex       sync.RWMutex
	getOrganizationsArgsForCall []struct {
	}
	getOrganizationsReturns struct {
		result1 []v3action.Organization
		result2 v3action.Warnings
		result3 error
	}
	getOrganizationsReturnsOnCall map[int]struct {
		result1 []v3action.Organization
		result2 v3action.Warnings
		result3 error
	}
	GetSpaceByNameAndOrganizationStub        func(string, string) (v3action.Space, v3action.Warnings, error)
	getSpaceByNameAndOrganizationMutex       sync.RWMutex
	getSpaceByNameAndOrganizationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceByNameAndOrganizationReturns struct {
		result1 v3action.Space
		result2 v3action.Warnings
		result3 error
	}
	getSpaceByNameAndOrganizationReturnsOnCall map[int]struct {
		result1 v3action.Space
		result2 v3action.Warnings
		result3 error
	}
	SetTargetStub        func(v3action.TargetSettings) (v3action.Warnings, error)
	setTargetMutex       sync.RWMutex
	setTargetArgsForCall []struct {
		arg1 v3action.TargetSettings
	}
	setTargetReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	setTargetReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoginActor) Authenticate(arg1 map[string]string, arg2 string, arg3 constant.GrantType) error {
	fake.authenticateMutex.Lock()
	ret, specificReturn := fake.authenticateReturnsOnCall[len(fake.authenticateArgsForCall)]
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		arg1 map[string]string
		arg2 string
		arg3 constant.GrantType
	}{arg1, arg2, arg3})
	fake.recordInvocation("Authenticate", []interface{}{arg1, arg2, arg3})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.authenticateReturns
	return fakeReturns.result1
}

func (fake *FakeLoginActor) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeLoginActor) AuthenticateCalls(stub func(map[string]string, string, constant.GrantType) error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = stub
}

func (fake *FakeLoginActor) AuthenticateArgsForCall(i int) (map[string]string, string, constant.GrantType) {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	argsForCall := fake.authenticateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLoginActor) AuthenticateReturns(result1 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoginActor) AuthenticateReturnsOnCall(i int, result1 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	if fake.authenticateReturnsOnCall == nil {
		fake.authenticateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.authenticateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoginActor) GetLoginPrompts() map[string]coreconfig.AuthPrompt {
	fake.getLoginPromptsMutex.Lock()
	ret, specificReturn := fake.getLoginPromptsReturnsOnCall[len(fake.getLoginPromptsArgsForCall)]
	fake.getLoginPromptsArgsForCall = append(fake.getLoginPromptsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetLoginPrompts", []interface{}{})
	fake.getLoginPromptsMutex.Unlock()
	if fake.GetLoginPromptsStub != nil {
		return fake.GetLoginPromptsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getLoginPromptsReturns
	return fakeReturns.result1
}

func (fake *FakeLoginActor) GetLoginPromptsCallCount() int {
	fake.getLoginPromptsMutex.RLock()
	defer fake.getLoginPromptsMutex.RUnlock()
	return len(fake.getLoginPromptsArgsForCall)
}

func (fake *FakeLoginActor) GetLoginPromptsCalls(stub func() map[string]coreconfig.AuthPrompt) {
	fake.getLoginPromptsMutex.Lock()
	defer fake.getLoginPromptsMutex.Unlock()
	fake.GetLoginPromptsStub = stub
}

func (fake *FakeLoginActor) GetLoginPromptsReturns(result1 map[string]coreconfig.AuthPrompt) {
	fake.getLoginPromptsMutex.Lock()
	defer fake.getLoginPromptsMutex.Unlock()
	fake.GetLoginPromptsStub = nil
	fake.getLoginPromptsReturns = struct {
		result1 map[string]coreconfig.AuthPrompt
	}{result1}
}

func (fake *FakeLoginActor) GetLoginPromptsReturnsOnCall(i int, result1 map[string]coreconfig.AuthPrompt) {
	fake.getLoginPromptsMutex.Lock()
	defer fake.getLoginPromptsMutex.Unlock()
	fake.GetLoginPromptsStub = nil
	if fake.getLoginPromptsReturnsOnCall == nil {
		fake.getLoginPromptsReturnsOnCall = make(map[int]struct {
			result1 map[string]coreconfig.AuthPrompt
		})
	}
	fake.getLoginPromptsReturnsOnCall[i] = struct {
		result1 map[string]coreconfig.AuthPrompt
	}{result1}
}

func (fake *FakeLoginActor) GetOrganizationByName(arg1 string) (v3action.Organization, v3action.Warnings, error) {
	fake.getOrganizationByNameMutex.Lock()
	ret, specificReturn := fake.getOrganizationByNameReturnsOnCall[len(fake.getOrganizationByNameArgsForCall)]
	fake.getOrganizationByNameArgsForCall = append(fake.getOrganizationByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrganizationByName", []interface{}{arg1})
	fake.getOrganizationByNameMutex.Unlock()
	if fake.GetOrganizationByNameStub != nil {
		return fake.GetOrganizationByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getOrganizationByNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLoginActor) GetOrganizationByNameCallCount() int {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	return len(fake.getOrganizationByNameArgsForCall)
}

func (fake *FakeLoginActor) GetOrganizationByNameCalls(stub func(string) (v3action.Organization, v3action.Warnings, error)) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = stub
}

func (fake *FakeLoginActor) GetOrganizationByNameArgsForCall(i int) string {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	argsForCall := fake.getOrganizationByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoginActor) GetOrganizationByNameReturns(result1 v3action.Organization, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = nil
	fake.getOrganizationByNameReturns = struct {
		result1 v3action.Organization
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetOrganizationByNameReturnsOnCall(i int, result1 v3action.Organization, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = nil
	if fake.getOrganizationByNameReturnsOnCall == nil {
		fake.getOrganizationByNameReturnsOnCall = make(map[int]struct {
			result1 v3action.Organization
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getOrganizationByNameReturnsOnCall[i] = struct {
		result1 v3action.Organization
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetOrganizationSpaces(arg1 string) ([]v3action.Space, v3action.Warnings, error) {
	fake.getOrganizationSpacesMutex.Lock()
	ret, specificReturn := fake.getOrganizationSpacesReturnsOnCall[len(fake.getOrganizationSpacesArgsForCall)]
	fake.getOrganizationSpacesArgsForCall = append(fake.getOrganizationSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrganizationSpaces", []interface{}{arg1})
	fake.getOrganizationSpacesMutex.Unlock()
	if fake.GetOrganizationSpacesStub != nil {
		return fake.GetOrganizationSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getOrganizationSpacesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLoginActor) GetOrganizationSpacesCallCount() int {
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	return len(fake.getOrganizationSpacesArgsForCall)
}

func (fake *FakeLoginActor) GetOrganizationSpacesCalls(stub func(string) ([]v3action.Space, v3action.Warnings, error)) {
	fake.getOrganizationSpacesMutex.Lock()
	defer fake.getOrganizationSpacesMutex.Unlock()
	fake.GetOrganizationSpacesStub = stub
}

func (fake *FakeLoginActor) GetOrganizationSpacesArgsForCall(i int) string {
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	argsForCall := fake.getOrganizationSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoginActor) GetOrganizationSpacesReturns(result1 []v3action.Space, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationSpacesMutex.Lock()
	defer fake.getOrganizationSpacesMutex.Unlock()
	fake.GetOrganizationSpacesStub = nil
	fake.getOrganizationSpacesReturns = struct {
		result1 []v3action.Space
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetOrganizationSpacesReturnsOnCall(i int, result1 []v3action.Space, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationSpacesMutex.Lock()
	defer fake.getOrganizationSpacesMutex.Unlock()
	fake.GetOrganizationSpacesStub = nil
	if fake.getOrganizationSpacesReturnsOnCall == nil {
		fake.getOrganizationSpacesReturnsOnCall = make(map[int]struct {
			result1 []v3action.Space
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getOrganizationSpacesReturnsOnCall[i] = struct {
		result1 []v3action.Space
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetOrganizations() ([]v3action.Organization, v3action.Warnings, error) {
	fake.getOrganizationsMutex.Lock()
	ret, specificReturn := fake.getOrganizationsReturnsOnCall[len(fake.getOrganizationsArgsForCall)]
	fake.getOrganizationsArgsForCall = append(fake.getOrganizationsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetOrganizations", []interface{}{})
	fake.getOrganizationsMutex.Unlock()
	if fake.GetOrganizationsStub != nil {
		return fake.GetOrganizationsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getOrganizationsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLoginActor) GetOrganizationsCallCount() int {
	fake.getOrganizationsMutex.RLock()
	defer fake.getOrganizationsMutex.RUnlock()
	return len(fake.getOrganizationsArgsForCall)
}

func (fake *FakeLoginActor) GetOrganizationsCalls(stub func() ([]v3action.Organization, v3action.Warnings, error)) {
	fake.getOrganizationsMutex.Lock()
	defer fake.getOrganizationsMutex.Unlock()
	fake.GetOrganizationsStub = stub
}

func (fake *FakeLoginActor) GetOrganizationsReturns(result1 []v3action.Organization, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationsMutex.Lock()
	defer fake.getOrganizationsMutex.Unlock()
	fake.GetOrganizationsStub = nil
	fake.getOrganizationsReturns = struct {
		result1 []v3action.Organization
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetOrganizationsReturnsOnCall(i int, result1 []v3action.Organization, result2 v3action.Warnings, result3 error) {
	fake.getOrganizationsMutex.Lock()
	defer fake.getOrganizationsMutex.Unlock()
	fake.GetOrganizationsStub = nil
	if fake.getOrganizationsReturnsOnCall == nil {
		fake.getOrganizationsReturnsOnCall = make(map[int]struct {
			result1 []v3action.Organization
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getOrganizationsReturnsOnCall[i] = struct {
		result1 []v3action.Organization
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganization(arg1 string, arg2 string) (v3action.Space, v3action.Warnings, error) {
	fake.getSpaceByNameAndOrganizationMutex.Lock()
	ret, specificReturn := fake.getSpaceByNameAndOrganizationReturnsOnCall[len(fake.getSpaceByNameAndOrganizationArgsForCall)]
	fake.getSpaceByNameAndOrganizationArgsForCall = append(fake.getSpaceByNameAndOrganizationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSpaceByNameAndOrganization", []interface{}{arg1, arg2})
	fake.getSpaceByNameAndOrganizationMutex.Unlock()
	if fake.GetSpaceByNameAndOrganizationStub != nil {
		return fake.GetSpaceByNameAndOrganizationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getSpaceByNameAndOrganizationReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganizationCallCount() int {
	fake.getSpaceByNameAndOrganizationMutex.RLock()
	defer fake.getSpaceByNameAndOrganizationMutex.RUnlock()
	return len(fake.getSpaceByNameAndOrganizationArgsForCall)
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganizationCalls(stub func(string, string) (v3action.Space, v3action.Warnings, error)) {
	fake.getSpaceByNameAndOrganizationMutex.Lock()
	defer fake.getSpaceByNameAndOrganizationMutex.Unlock()
	fake.GetSpaceByNameAndOrganizationStub = stub
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganizationArgsForCall(i int) (string, string) {
	fake.getSpaceByNameAndOrganizationMutex.RLock()
	defer fake.getSpaceByNameAndOrganizationMutex.RUnlock()
	argsForCall := fake.getSpaceByNameAndOrganizationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganizationReturns(result1 v3action.Space, result2 v3action.Warnings, result3 error) {
	fake.getSpaceByNameAndOrganizationMutex.Lock()
	defer fake.getSpaceByNameAndOrganizationMutex.Unlock()
	fake.GetSpaceByNameAndOrganizationStub = nil
	fake.getSpaceByNameAndOrganizationReturns = struct {
		result1 v3action.Space
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) GetSpaceByNameAndOrganizationReturnsOnCall(i int, result1 v3action.Space, result2 v3action.Warnings, result3 error) {
	fake.getSpaceByNameAndOrganizationMutex.Lock()
	defer fake.getSpaceByNameAndOrganizationMutex.Unlock()
	fake.GetSpaceByNameAndOrganizationStub = nil
	if fake.getSpaceByNameAndOrganizationReturnsOnCall == nil {
		fake.getSpaceByNameAndOrganizationReturnsOnCall = make(map[int]struct {
			result1 v3action.Space
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getSpaceByNameAndOrganizationReturnsOnCall[i] = struct {
		result1 v3action.Space
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLoginActor) SetTarget(arg1 v3action.TargetSettings) (v3action.Warnings, error) {
	fake.setTargetMutex.Lock()
	ret, specificReturn := fake.setTargetReturnsOnCall[len(fake.setTargetArgsForCall)]
	fake.setTargetArgsForCall = append(fake.setTargetArgsForCall, struct {
		arg1 v3action.TargetSettings
	}{arg1})
	fake.recordInvocation("SetTarget", []interface{}{arg1})
	fake.setTargetMutex.Unlock()
	if fake.SetTargetStub != nil {
		return fake.SetTargetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setTargetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoginActor) SetTargetCallCount() int {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return len(fake.setTargetArgsForCall)
}

func (fake *FakeLoginActor) SetTargetCalls(stub func(v3action.TargetSettings) (v3action.Warnings, error)) {
	fake.setTargetMutex.Lock()
	defer fake.setTargetMutex.Unlock()
	fake.SetTargetStub = stub
}

func (fake *FakeLoginActor) SetTargetArgsForCall(i int) v3action.TargetSettings {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	argsForCall := fake.setTargetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoginActor) SetTargetReturns(result1 v3action.Warnings, result2 error) {
	fake.setTargetMutex.Lock()
	defer fake.setTargetMutex.Unlock()
	fake.SetTargetStub = nil
	fake.setTargetReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeLoginActor) SetTargetReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.setTargetMutex.Lock()
	defer fake.setTargetMutex.Unlock()
	fake.SetTargetStub = nil
	if fake.setTargetReturnsOnCall == nil {
		fake.setTargetReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.setTargetReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeLoginActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	fake.getLoginPromptsMutex.RLock()
	defer fake.getLoginPromptsMutex.RUnlock()
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	fake.getOrganizationsMutex.RLock()
	defer fake.getOrganizationsMutex.RUnlock()
	fake.getSpaceByNameAndOrganizationMutex.RLock()
	defer fake.getSpaceByNameAndOrganizationMutex.RUnlock()
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLoginActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.LoginActor = new(FakeLoginActor)
