// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/v2action"
	v6 "code.cloudfoundry.org/cli/v7/command/v6"
)

type FakeCreateServiceKeyActor struct {
	CreateServiceKeyStub        func(string, string, string, map[string]interface{}) (v2action.ServiceKey, v2action.Warnings, error)
	createServiceKeyMutex       sync.RWMutex
	createServiceKeyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]interface{}
	}
	createServiceKeyReturns struct {
		result1 v2action.ServiceKey
		result2 v2action.Warnings
		result3 error
	}
	createServiceKeyReturnsOnCall map[int]struct {
		result1 v2action.ServiceKey
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKey(arg1 string, arg2 string, arg3 string, arg4 map[string]interface{}) (v2action.ServiceKey, v2action.Warnings, error) {
	fake.createServiceKeyMutex.Lock()
	ret, specificReturn := fake.createServiceKeyReturnsOnCall[len(fake.createServiceKeyArgsForCall)]
	fake.createServiceKeyArgsForCall = append(fake.createServiceKeyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateServiceKeyStub
	fakeReturns := fake.createServiceKeyReturns
	fake.recordInvocation("CreateServiceKey", []interface{}{arg1, arg2, arg3, arg4})
	fake.createServiceKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKeyCallCount() int {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	return len(fake.createServiceKeyArgsForCall)
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKeyCalls(stub func(string, string, string, map[string]interface{}) (v2action.ServiceKey, v2action.Warnings, error)) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = stub
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKeyArgsForCall(i int) (string, string, string, map[string]interface{}) {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	argsForCall := fake.createServiceKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKeyReturns(result1 v2action.ServiceKey, result2 v2action.Warnings, result3 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	fake.createServiceKeyReturns = struct {
		result1 v2action.ServiceKey
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateServiceKeyActor) CreateServiceKeyReturnsOnCall(i int, result1 v2action.ServiceKey, result2 v2action.Warnings, result3 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	if fake.createServiceKeyReturnsOnCall == nil {
		fake.createServiceKeyReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceKey
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createServiceKeyReturnsOnCall[i] = struct {
		result1 v2action.ServiceKey
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateServiceKeyActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateServiceKeyActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.CreateServiceKeyActor = new(FakeCreateServiceKeyActor)
