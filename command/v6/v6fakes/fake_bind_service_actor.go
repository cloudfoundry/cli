// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/v2action"
	v6 "code.cloudfoundry.org/cli/v7/command/v6"
)

type FakeBindServiceActor struct {
	BindServiceBySpaceStub        func(string, string, string, string, map[string]interface{}) (v2action.ServiceBinding, v2action.Warnings, error)
	bindServiceBySpaceMutex       sync.RWMutex
	bindServiceBySpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 map[string]interface{}
	}
	bindServiceBySpaceReturns struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}
	bindServiceBySpaceReturnsOnCall map[int]struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBindServiceActor) BindServiceBySpace(arg1 string, arg2 string, arg3 string, arg4 string, arg5 map[string]interface{}) (v2action.ServiceBinding, v2action.Warnings, error) {
	fake.bindServiceBySpaceMutex.Lock()
	ret, specificReturn := fake.bindServiceBySpaceReturnsOnCall[len(fake.bindServiceBySpaceArgsForCall)]
	fake.bindServiceBySpaceArgsForCall = append(fake.bindServiceBySpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 map[string]interface{}
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BindServiceBySpaceStub
	fakeReturns := fake.bindServiceBySpaceReturns
	fake.recordInvocation("BindServiceBySpace", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.bindServiceBySpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBindServiceActor) BindServiceBySpaceCallCount() int {
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	return len(fake.bindServiceBySpaceArgsForCall)
}

func (fake *FakeBindServiceActor) BindServiceBySpaceCalls(stub func(string, string, string, string, map[string]interface{}) (v2action.ServiceBinding, v2action.Warnings, error)) {
	fake.bindServiceBySpaceMutex.Lock()
	defer fake.bindServiceBySpaceMutex.Unlock()
	fake.BindServiceBySpaceStub = stub
}

func (fake *FakeBindServiceActor) BindServiceBySpaceArgsForCall(i int) (string, string, string, string, map[string]interface{}) {
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	argsForCall := fake.bindServiceBySpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeBindServiceActor) BindServiceBySpaceReturns(result1 v2action.ServiceBinding, result2 v2action.Warnings, result3 error) {
	fake.bindServiceBySpaceMutex.Lock()
	defer fake.bindServiceBySpaceMutex.Unlock()
	fake.BindServiceBySpaceStub = nil
	fake.bindServiceBySpaceReturns = struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBindServiceActor) BindServiceBySpaceReturnsOnCall(i int, result1 v2action.ServiceBinding, result2 v2action.Warnings, result3 error) {
	fake.bindServiceBySpaceMutex.Lock()
	defer fake.bindServiceBySpaceMutex.Unlock()
	fake.BindServiceBySpaceStub = nil
	if fake.bindServiceBySpaceReturnsOnCall == nil {
		fake.bindServiceBySpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceBinding
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.bindServiceBySpaceReturnsOnCall[i] = struct {
		result1 v2action.ServiceBinding
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBindServiceActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	stub := fake.CloudControllerAPIVersionStub
	fakeReturns := fake.cloudControllerAPIVersionReturns
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBindServiceActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeBindServiceActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeBindServiceActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBindServiceActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBindServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBindServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.BindServiceActor = new(FakeBindServiceActor)
