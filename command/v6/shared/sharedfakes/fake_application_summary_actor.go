// Code generated by counterfeiter. DO NOT EDIT.
package sharedfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/v7/actor/v2v3action"
	"code.cloudfoundry.org/cli/v7/command/v6/shared"
)

type FakeApplicationSummaryActor struct {
	CloudControllerV3APIVersionStub        func() string
	cloudControllerV3APIVersionMutex       sync.RWMutex
	cloudControllerV3APIVersionArgsForCall []struct {
	}
	cloudControllerV3APIVersionReturns struct {
		result1 string
	}
	cloudControllerV3APIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetApplicationSummaryByNameAndSpaceStub        func(string, string, bool) (v2v3action.ApplicationSummary, v2v3action.Warnings, error)
	getApplicationSummaryByNameAndSpaceMutex       sync.RWMutex
	getApplicationSummaryByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	getApplicationSummaryByNameAndSpaceReturns struct {
		result1 v2v3action.ApplicationSummary
		result2 v2v3action.Warnings
		result3 error
	}
	getApplicationSummaryByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2v3action.ApplicationSummary
		result2 v2v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApplicationSummaryActor) CloudControllerV3APIVersion() string {
	fake.cloudControllerV3APIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerV3APIVersionReturnsOnCall[len(fake.cloudControllerV3APIVersionArgsForCall)]
	fake.cloudControllerV3APIVersionArgsForCall = append(fake.cloudControllerV3APIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerV3APIVersion", []interface{}{})
	fake.cloudControllerV3APIVersionMutex.Unlock()
	if fake.CloudControllerV3APIVersionStub != nil {
		return fake.CloudControllerV3APIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerV3APIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeApplicationSummaryActor) CloudControllerV3APIVersionCallCount() int {
	fake.cloudControllerV3APIVersionMutex.RLock()
	defer fake.cloudControllerV3APIVersionMutex.RUnlock()
	return len(fake.cloudControllerV3APIVersionArgsForCall)
}

func (fake *FakeApplicationSummaryActor) CloudControllerV3APIVersionCalls(stub func() string) {
	fake.cloudControllerV3APIVersionMutex.Lock()
	defer fake.cloudControllerV3APIVersionMutex.Unlock()
	fake.CloudControllerV3APIVersionStub = stub
}

func (fake *FakeApplicationSummaryActor) CloudControllerV3APIVersionReturns(result1 string) {
	fake.cloudControllerV3APIVersionMutex.Lock()
	defer fake.cloudControllerV3APIVersionMutex.Unlock()
	fake.CloudControllerV3APIVersionStub = nil
	fake.cloudControllerV3APIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicationSummaryActor) CloudControllerV3APIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerV3APIVersionMutex.Lock()
	defer fake.cloudControllerV3APIVersionMutex.Unlock()
	fake.CloudControllerV3APIVersionStub = nil
	if fake.cloudControllerV3APIVersionReturnsOnCall == nil {
		fake.cloudControllerV3APIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerV3APIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpace(arg1 string, arg2 string, arg3 bool) (v2v3action.ApplicationSummary, v2v3action.Warnings, error) {
	fake.getApplicationSummaryByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationSummaryByNameAndSpaceReturnsOnCall[len(fake.getApplicationSummaryByNameAndSpaceArgsForCall)]
	fake.getApplicationSummaryByNameAndSpaceArgsForCall = append(fake.getApplicationSummaryByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetApplicationSummaryByNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.getApplicationSummaryByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationSummaryByNameAndSpaceStub != nil {
		return fake.GetApplicationSummaryByNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationSummaryByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpaceCallCount() int {
	fake.getApplicationSummaryByNameAndSpaceMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationSummaryByNameAndSpaceArgsForCall)
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpaceCalls(stub func(string, string, bool) (v2v3action.ApplicationSummary, v2v3action.Warnings, error)) {
	fake.getApplicationSummaryByNameAndSpaceMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceStub = stub
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpaceArgsForCall(i int) (string, string, bool) {
	fake.getApplicationSummaryByNameAndSpaceMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getApplicationSummaryByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpaceReturns(result1 v2v3action.ApplicationSummary, result2 v2v3action.Warnings, result3 error) {
	fake.getApplicationSummaryByNameAndSpaceMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceStub = nil
	fake.getApplicationSummaryByNameAndSpaceReturns = struct {
		result1 v2v3action.ApplicationSummary
		result2 v2v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApplicationSummaryActor) GetApplicationSummaryByNameAndSpaceReturnsOnCall(i int, result1 v2v3action.ApplicationSummary, result2 v2v3action.Warnings, result3 error) {
	fake.getApplicationSummaryByNameAndSpaceMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceStub = nil
	if fake.getApplicationSummaryByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationSummaryByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2v3action.ApplicationSummary
			result2 v2v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationSummaryByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2v3action.ApplicationSummary
		result2 v2v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApplicationSummaryActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerV3APIVersionMutex.RLock()
	defer fake.cloudControllerV3APIVersionMutex.RUnlock()
	fake.getApplicationSummaryByNameAndSpaceMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApplicationSummaryActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shared.ApplicationSummaryActor = new(FakeApplicationSummaryActor)
