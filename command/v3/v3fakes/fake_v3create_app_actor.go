// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3CreateAppActor struct {
	CreateApplicationByNameAndSpaceStub        func(createApplicationInput v3action.CreateApplicationInput) (v3action.Application, v3action.Warnings, error)
	createApplicationByNameAndSpaceMutex       sync.RWMutex
	createApplicationByNameAndSpaceArgsForCall []struct {
		createApplicationInput v3action.CreateApplicationInput
	}
	createApplicationByNameAndSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	createApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3CreateAppActor) CreateApplicationByNameAndSpace(createApplicationInput v3action.CreateApplicationInput) (v3action.Application, v3action.Warnings, error) {
	fake.createApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createApplicationByNameAndSpaceReturnsOnCall[len(fake.createApplicationByNameAndSpaceArgsForCall)]
	fake.createApplicationByNameAndSpaceArgsForCall = append(fake.createApplicationByNameAndSpaceArgsForCall, struct {
		createApplicationInput v3action.CreateApplicationInput
	}{createApplicationInput})
	fake.recordInvocation("CreateApplicationByNameAndSpace", []interface{}{createApplicationInput})
	fake.createApplicationByNameAndSpaceMutex.Unlock()
	if fake.CreateApplicationByNameAndSpaceStub != nil {
		return fake.CreateApplicationByNameAndSpaceStub(createApplicationInput)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createApplicationByNameAndSpaceReturns.result1, fake.createApplicationByNameAndSpaceReturns.result2, fake.createApplicationByNameAndSpaceReturns.result3
}

func (fake *FakeV3CreateAppActor) CreateApplicationByNameAndSpaceCallCount() int {
	fake.createApplicationByNameAndSpaceMutex.RLock()
	defer fake.createApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.createApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeV3CreateAppActor) CreateApplicationByNameAndSpaceArgsForCall(i int) v3action.CreateApplicationInput {
	fake.createApplicationByNameAndSpaceMutex.RLock()
	defer fake.createApplicationByNameAndSpaceMutex.RUnlock()
	return fake.createApplicationByNameAndSpaceArgsForCall[i].createApplicationInput
}

func (fake *FakeV3CreateAppActor) CreateApplicationByNameAndSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.CreateApplicationByNameAndSpaceStub = nil
	fake.createApplicationByNameAndSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3CreateAppActor) CreateApplicationByNameAndSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.CreateApplicationByNameAndSpaceStub = nil
	if fake.createApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.createApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3CreateAppActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createApplicationByNameAndSpaceMutex.RLock()
	defer fake.createApplicationByNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3CreateAppActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3CreateAppActor = new(FakeV3CreateAppActor)
