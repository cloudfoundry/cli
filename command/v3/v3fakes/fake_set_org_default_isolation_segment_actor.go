// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeSetOrgDefaultIsolationSegmentActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetIsolationSegmentByNameStub        func(isoSegName string) (v3action.IsolationSegment, v3action.Warnings, error)
	getIsolationSegmentByNameMutex       sync.RWMutex
	getIsolationSegmentByNameArgsForCall []struct {
		isoSegName string
	}
	getIsolationSegmentByNameReturns struct {
		result1 v3action.IsolationSegment
		result2 v3action.Warnings
		result3 error
	}
	getIsolationSegmentByNameReturnsOnCall map[int]struct {
		result1 v3action.IsolationSegment
		result2 v3action.Warnings
		result3 error
	}
	SetOrganizationDefaultIsolationSegmentStub        func(orgGUID string, isoSegGUID string) (v3action.Warnings, error)
	setOrganizationDefaultIsolationSegmentMutex       sync.RWMutex
	setOrganizationDefaultIsolationSegmentArgsForCall []struct {
		orgGUID    string
		isoSegGUID string
	}
	setOrganizationDefaultIsolationSegmentReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	setOrganizationDefaultIsolationSegmentReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) GetIsolationSegmentByName(isoSegName string) (v3action.IsolationSegment, v3action.Warnings, error) {
	fake.getIsolationSegmentByNameMutex.Lock()
	ret, specificReturn := fake.getIsolationSegmentByNameReturnsOnCall[len(fake.getIsolationSegmentByNameArgsForCall)]
	fake.getIsolationSegmentByNameArgsForCall = append(fake.getIsolationSegmentByNameArgsForCall, struct {
		isoSegName string
	}{isoSegName})
	fake.recordInvocation("GetIsolationSegmentByName", []interface{}{isoSegName})
	fake.getIsolationSegmentByNameMutex.Unlock()
	if fake.GetIsolationSegmentByNameStub != nil {
		return fake.GetIsolationSegmentByNameStub(isoSegName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getIsolationSegmentByNameReturns.result1, fake.getIsolationSegmentByNameReturns.result2, fake.getIsolationSegmentByNameReturns.result3
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) GetIsolationSegmentByNameCallCount() int {
	fake.getIsolationSegmentByNameMutex.RLock()
	defer fake.getIsolationSegmentByNameMutex.RUnlock()
	return len(fake.getIsolationSegmentByNameArgsForCall)
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) GetIsolationSegmentByNameArgsForCall(i int) string {
	fake.getIsolationSegmentByNameMutex.RLock()
	defer fake.getIsolationSegmentByNameMutex.RUnlock()
	return fake.getIsolationSegmentByNameArgsForCall[i].isoSegName
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) GetIsolationSegmentByNameReturns(result1 v3action.IsolationSegment, result2 v3action.Warnings, result3 error) {
	fake.GetIsolationSegmentByNameStub = nil
	fake.getIsolationSegmentByNameReturns = struct {
		result1 v3action.IsolationSegment
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) GetIsolationSegmentByNameReturnsOnCall(i int, result1 v3action.IsolationSegment, result2 v3action.Warnings, result3 error) {
	fake.GetIsolationSegmentByNameStub = nil
	if fake.getIsolationSegmentByNameReturnsOnCall == nil {
		fake.getIsolationSegmentByNameReturnsOnCall = make(map[int]struct {
			result1 v3action.IsolationSegment
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getIsolationSegmentByNameReturnsOnCall[i] = struct {
		result1 v3action.IsolationSegment
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) SetOrganizationDefaultIsolationSegment(orgGUID string, isoSegGUID string) (v3action.Warnings, error) {
	fake.setOrganizationDefaultIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.setOrganizationDefaultIsolationSegmentReturnsOnCall[len(fake.setOrganizationDefaultIsolationSegmentArgsForCall)]
	fake.setOrganizationDefaultIsolationSegmentArgsForCall = append(fake.setOrganizationDefaultIsolationSegmentArgsForCall, struct {
		orgGUID    string
		isoSegGUID string
	}{orgGUID, isoSegGUID})
	fake.recordInvocation("SetOrganizationDefaultIsolationSegment", []interface{}{orgGUID, isoSegGUID})
	fake.setOrganizationDefaultIsolationSegmentMutex.Unlock()
	if fake.SetOrganizationDefaultIsolationSegmentStub != nil {
		return fake.SetOrganizationDefaultIsolationSegmentStub(orgGUID, isoSegGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setOrganizationDefaultIsolationSegmentReturns.result1, fake.setOrganizationDefaultIsolationSegmentReturns.result2
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) SetOrganizationDefaultIsolationSegmentCallCount() int {
	fake.setOrganizationDefaultIsolationSegmentMutex.RLock()
	defer fake.setOrganizationDefaultIsolationSegmentMutex.RUnlock()
	return len(fake.setOrganizationDefaultIsolationSegmentArgsForCall)
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) SetOrganizationDefaultIsolationSegmentArgsForCall(i int) (string, string) {
	fake.setOrganizationDefaultIsolationSegmentMutex.RLock()
	defer fake.setOrganizationDefaultIsolationSegmentMutex.RUnlock()
	return fake.setOrganizationDefaultIsolationSegmentArgsForCall[i].orgGUID, fake.setOrganizationDefaultIsolationSegmentArgsForCall[i].isoSegGUID
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) SetOrganizationDefaultIsolationSegmentReturns(result1 v3action.Warnings, result2 error) {
	fake.SetOrganizationDefaultIsolationSegmentStub = nil
	fake.setOrganizationDefaultIsolationSegmentReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) SetOrganizationDefaultIsolationSegmentReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.SetOrganizationDefaultIsolationSegmentStub = nil
	if fake.setOrganizationDefaultIsolationSegmentReturnsOnCall == nil {
		fake.setOrganizationDefaultIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.setOrganizationDefaultIsolationSegmentReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getIsolationSegmentByNameMutex.RLock()
	defer fake.getIsolationSegmentByNameMutex.RUnlock()
	fake.setOrganizationDefaultIsolationSegmentMutex.RLock()
	defer fake.setOrganizationDefaultIsolationSegmentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSetOrgDefaultIsolationSegmentActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.SetOrgDefaultIsolationSegmentActor = new(FakeSetOrgDefaultIsolationSegmentActor)
