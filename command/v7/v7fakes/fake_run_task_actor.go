// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	"code.cloudfoundry.org/cli/command/v7"
)

type FakeRunTaskActor struct {
	GetApplicationByNameAndSpaceStub        func(appName string, spaceGUID string) (v7action.Application, v7action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		appName   string
		spaceGUID string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}
	RunTaskStub        func(appGUID string, task v7action.Task) (v7action.Task, v7action.Warnings, error)
	runTaskMutex       sync.RWMutex
	runTaskArgsForCall []struct {
		appGUID string
		task    v7action.Task
	}
	runTaskReturns struct {
		result1 v7action.Task
		result2 v7action.Warnings
		result3 error
	}
	runTaskReturnsOnCall map[int]struct {
		result1 v7action.Task
		result2 v7action.Warnings
		result3 error
	}
	GetProcessByTypeAndApplicationStub        func(processType string, appGUID string) (v7action.Process, v7action.Warnings, error)
	getProcessByTypeAndApplicationMutex       sync.RWMutex
	getProcessByTypeAndApplicationArgsForCall []struct {
		processType string
		appGUID     string
	}
	getProcessByTypeAndApplicationReturns struct {
		result1 v7action.Process
		result2 v7action.Warnings
		result3 error
	}
	getProcessByTypeAndApplicationReturnsOnCall map[int]struct {
		result1 v7action.Process
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunTaskActor) GetApplicationByNameAndSpace(appName string, spaceGUID string) (v7action.Application, v7action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		appName   string
		spaceGUID string
	}{appName, spaceGUID})
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{appName, spaceGUID})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationByNameAndSpaceStub != nil {
		return fake.GetApplicationByNameAndSpaceStub(appName, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getApplicationByNameAndSpaceReturns.result1, fake.getApplicationByNameAndSpaceReturns.result2, fake.getApplicationByNameAndSpaceReturns.result3
}

func (fake *FakeRunTaskActor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeRunTaskActor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return fake.getApplicationByNameAndSpaceArgsForCall[i].appName, fake.getApplicationByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeRunTaskActor) GetApplicationByNameAndSpaceReturns(result1 v7action.Application, result2 v7action.Warnings, result3 error) {
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v7action.Application, result2 v7action.Warnings, result3 error) {
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v7action.Application
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) RunTask(appGUID string, task v7action.Task) (v7action.Task, v7action.Warnings, error) {
	fake.runTaskMutex.Lock()
	ret, specificReturn := fake.runTaskReturnsOnCall[len(fake.runTaskArgsForCall)]
	fake.runTaskArgsForCall = append(fake.runTaskArgsForCall, struct {
		appGUID string
		task    v7action.Task
	}{appGUID, task})
	fake.recordInvocation("RunTask", []interface{}{appGUID, task})
	fake.runTaskMutex.Unlock()
	if fake.RunTaskStub != nil {
		return fake.RunTaskStub(appGUID, task)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.runTaskReturns.result1, fake.runTaskReturns.result2, fake.runTaskReturns.result3
}

func (fake *FakeRunTaskActor) RunTaskCallCount() int {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return len(fake.runTaskArgsForCall)
}

func (fake *FakeRunTaskActor) RunTaskArgsForCall(i int) (string, v7action.Task) {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return fake.runTaskArgsForCall[i].appGUID, fake.runTaskArgsForCall[i].task
}

func (fake *FakeRunTaskActor) RunTaskReturns(result1 v7action.Task, result2 v7action.Warnings, result3 error) {
	fake.RunTaskStub = nil
	fake.runTaskReturns = struct {
		result1 v7action.Task
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) RunTaskReturnsOnCall(i int, result1 v7action.Task, result2 v7action.Warnings, result3 error) {
	fake.RunTaskStub = nil
	if fake.runTaskReturnsOnCall == nil {
		fake.runTaskReturnsOnCall = make(map[int]struct {
			result1 v7action.Task
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.runTaskReturnsOnCall[i] = struct {
		result1 v7action.Task
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) GetProcessByTypeAndApplication(processType string, appGUID string) (v7action.Process, v7action.Warnings, error) {
	fake.getProcessByTypeAndApplicationMutex.Lock()
	ret, specificReturn := fake.getProcessByTypeAndApplicationReturnsOnCall[len(fake.getProcessByTypeAndApplicationArgsForCall)]
	fake.getProcessByTypeAndApplicationArgsForCall = append(fake.getProcessByTypeAndApplicationArgsForCall, struct {
		processType string
		appGUID     string
	}{processType, appGUID})
	fake.recordInvocation("GetProcessByTypeAndApplication", []interface{}{processType, appGUID})
	fake.getProcessByTypeAndApplicationMutex.Unlock()
	if fake.GetProcessByTypeAndApplicationStub != nil {
		return fake.GetProcessByTypeAndApplicationStub(processType, appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getProcessByTypeAndApplicationReturns.result1, fake.getProcessByTypeAndApplicationReturns.result2, fake.getProcessByTypeAndApplicationReturns.result3
}

func (fake *FakeRunTaskActor) GetProcessByTypeAndApplicationCallCount() int {
	fake.getProcessByTypeAndApplicationMutex.RLock()
	defer fake.getProcessByTypeAndApplicationMutex.RUnlock()
	return len(fake.getProcessByTypeAndApplicationArgsForCall)
}

func (fake *FakeRunTaskActor) GetProcessByTypeAndApplicationArgsForCall(i int) (string, string) {
	fake.getProcessByTypeAndApplicationMutex.RLock()
	defer fake.getProcessByTypeAndApplicationMutex.RUnlock()
	return fake.getProcessByTypeAndApplicationArgsForCall[i].processType, fake.getProcessByTypeAndApplicationArgsForCall[i].appGUID
}

func (fake *FakeRunTaskActor) GetProcessByTypeAndApplicationReturns(result1 v7action.Process, result2 v7action.Warnings, result3 error) {
	fake.GetProcessByTypeAndApplicationStub = nil
	fake.getProcessByTypeAndApplicationReturns = struct {
		result1 v7action.Process
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) GetProcessByTypeAndApplicationReturnsOnCall(i int, result1 v7action.Process, result2 v7action.Warnings, result3 error) {
	fake.GetProcessByTypeAndApplicationStub = nil
	if fake.getProcessByTypeAndApplicationReturnsOnCall == nil {
		fake.getProcessByTypeAndApplicationReturnsOnCall = make(map[int]struct {
			result1 v7action.Process
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getProcessByTypeAndApplicationReturnsOnCall[i] = struct {
		result1 v7action.Process
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunTaskActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	fake.getProcessByTypeAndApplicationMutex.RLock()
	defer fake.getProcessByTypeAndApplicationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRunTaskActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.RunTaskActor = new(FakeRunTaskActor)
