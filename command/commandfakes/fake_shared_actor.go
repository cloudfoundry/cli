// Code generated by counterfeiter. DO NOT EDIT.
package commandfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/command"
)

type FakeSharedActor struct {
	CheckTargetStub        func(targetedOrganizationRequired bool, targetedSpaceRequired bool) error
	checkTargetMutex       sync.RWMutex
	checkTargetArgsForCall []struct {
		targetedOrganizationRequired bool
		targetedSpaceRequired        bool
	}
	checkTargetReturns struct {
		result1 error
	}
	checkTargetReturnsOnCall map[int]struct {
		result1 error
	}
	RequireCurrentUserStub        func() (string, error)
	requireCurrentUserMutex       sync.RWMutex
	requireCurrentUserArgsForCall []struct{}
	requireCurrentUserReturns     struct {
		result1 string
		result2 error
	}
	requireCurrentUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RequireTargetedOrgStub        func() (string, error)
	requireTargetedOrgMutex       sync.RWMutex
	requireTargetedOrgArgsForCall []struct{}
	requireTargetedOrgReturns     struct {
		result1 string
		result2 error
	}
	requireTargetedOrgReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IsLoggedInStub        func() bool
	isLoggedInMutex       sync.RWMutex
	isLoggedInArgsForCall []struct{}
	isLoggedInReturns     struct {
		result1 bool
	}
	isLoggedInReturnsOnCall map[int]struct {
		result1 bool
	}
	CheckOrgSpaceTargetedStub        func() bool
	checkOrgSpaceTargetedMutex       sync.RWMutex
	checkOrgSpaceTargetedArgsForCall []struct{}
	checkOrgSpaceTargetedReturns     struct {
		result1 bool
	}
	checkOrgSpaceTargetedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSharedActor) CheckTarget(targetedOrganizationRequired bool, targetedSpaceRequired bool) error {
	fake.checkTargetMutex.Lock()
	ret, specificReturn := fake.checkTargetReturnsOnCall[len(fake.checkTargetArgsForCall)]
	fake.checkTargetArgsForCall = append(fake.checkTargetArgsForCall, struct {
		targetedOrganizationRequired bool
		targetedSpaceRequired        bool
	}{targetedOrganizationRequired, targetedSpaceRequired})
	fake.recordInvocation("CheckTarget", []interface{}{targetedOrganizationRequired, targetedSpaceRequired})
	fake.checkTargetMutex.Unlock()
	if fake.CheckTargetStub != nil {
		return fake.CheckTargetStub(targetedOrganizationRequired, targetedSpaceRequired)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkTargetReturns.result1
}

func (fake *FakeSharedActor) CheckTargetCallCount() int {
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	return len(fake.checkTargetArgsForCall)
}

func (fake *FakeSharedActor) CheckTargetArgsForCall(i int) (bool, bool) {
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	return fake.checkTargetArgsForCall[i].targetedOrganizationRequired, fake.checkTargetArgsForCall[i].targetedSpaceRequired
}

func (fake *FakeSharedActor) CheckTargetReturns(result1 error) {
	fake.CheckTargetStub = nil
	fake.checkTargetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) CheckTargetReturnsOnCall(i int, result1 error) {
	fake.CheckTargetStub = nil
	if fake.checkTargetReturnsOnCall == nil {
		fake.checkTargetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkTargetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) RequireCurrentUser() (string, error) {
	fake.requireCurrentUserMutex.Lock()
	ret, specificReturn := fake.requireCurrentUserReturnsOnCall[len(fake.requireCurrentUserArgsForCall)]
	fake.requireCurrentUserArgsForCall = append(fake.requireCurrentUserArgsForCall, struct{}{})
	fake.recordInvocation("RequireCurrentUser", []interface{}{})
	fake.requireCurrentUserMutex.Unlock()
	if fake.RequireCurrentUserStub != nil {
		return fake.RequireCurrentUserStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.requireCurrentUserReturns.result1, fake.requireCurrentUserReturns.result2
}

func (fake *FakeSharedActor) RequireCurrentUserCallCount() int {
	fake.requireCurrentUserMutex.RLock()
	defer fake.requireCurrentUserMutex.RUnlock()
	return len(fake.requireCurrentUserArgsForCall)
}

func (fake *FakeSharedActor) RequireCurrentUserReturns(result1 string, result2 error) {
	fake.RequireCurrentUserStub = nil
	fake.requireCurrentUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSharedActor) RequireCurrentUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.RequireCurrentUserStub = nil
	if fake.requireCurrentUserReturnsOnCall == nil {
		fake.requireCurrentUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.requireCurrentUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSharedActor) RequireTargetedOrg() (string, error) {
	fake.requireTargetedOrgMutex.Lock()
	ret, specificReturn := fake.requireTargetedOrgReturnsOnCall[len(fake.requireTargetedOrgArgsForCall)]
	fake.requireTargetedOrgArgsForCall = append(fake.requireTargetedOrgArgsForCall, struct{}{})
	fake.recordInvocation("RequireTargetedOrg", []interface{}{})
	fake.requireTargetedOrgMutex.Unlock()
	if fake.RequireTargetedOrgStub != nil {
		return fake.RequireTargetedOrgStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.requireTargetedOrgReturns.result1, fake.requireTargetedOrgReturns.result2
}

func (fake *FakeSharedActor) RequireTargetedOrgCallCount() int {
	fake.requireTargetedOrgMutex.RLock()
	defer fake.requireTargetedOrgMutex.RUnlock()
	return len(fake.requireTargetedOrgArgsForCall)
}

func (fake *FakeSharedActor) RequireTargetedOrgReturns(result1 string, result2 error) {
	fake.RequireTargetedOrgStub = nil
	fake.requireTargetedOrgReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSharedActor) RequireTargetedOrgReturnsOnCall(i int, result1 string, result2 error) {
	fake.RequireTargetedOrgStub = nil
	if fake.requireTargetedOrgReturnsOnCall == nil {
		fake.requireTargetedOrgReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.requireTargetedOrgReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSharedActor) IsLoggedIn() bool {
	fake.isLoggedInMutex.Lock()
	ret, specificReturn := fake.isLoggedInReturnsOnCall[len(fake.isLoggedInArgsForCall)]
	fake.isLoggedInArgsForCall = append(fake.isLoggedInArgsForCall, struct{}{})
	fake.recordInvocation("IsLoggedIn", []interface{}{})
	fake.isLoggedInMutex.Unlock()
	if fake.IsLoggedInStub != nil {
		return fake.IsLoggedInStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isLoggedInReturns.result1
}

func (fake *FakeSharedActor) IsLoggedInCallCount() int {
	fake.isLoggedInMutex.RLock()
	defer fake.isLoggedInMutex.RUnlock()
	return len(fake.isLoggedInArgsForCall)
}

func (fake *FakeSharedActor) IsLoggedInReturns(result1 bool) {
	fake.IsLoggedInStub = nil
	fake.isLoggedInReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSharedActor) IsLoggedInReturnsOnCall(i int, result1 bool) {
	fake.IsLoggedInStub = nil
	if fake.isLoggedInReturnsOnCall == nil {
		fake.isLoggedInReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isLoggedInReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSharedActor) CheckOrgSpaceTargeted() bool {
	fake.checkOrgSpaceTargetedMutex.Lock()
	ret, specificReturn := fake.checkOrgSpaceTargetedReturnsOnCall[len(fake.checkOrgSpaceTargetedArgsForCall)]
	fake.checkOrgSpaceTargetedArgsForCall = append(fake.checkOrgSpaceTargetedArgsForCall, struct{}{})
	fake.recordInvocation("CheckOrgSpaceTargeted", []interface{}{})
	fake.checkOrgSpaceTargetedMutex.Unlock()
	if fake.CheckOrgSpaceTargetedStub != nil {
		return fake.CheckOrgSpaceTargetedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkOrgSpaceTargetedReturns.result1
}

func (fake *FakeSharedActor) CheckOrgSpaceTargetedCallCount() int {
	fake.checkOrgSpaceTargetedMutex.RLock()
	defer fake.checkOrgSpaceTargetedMutex.RUnlock()
	return len(fake.checkOrgSpaceTargetedArgsForCall)
}

func (fake *FakeSharedActor) CheckOrgSpaceTargetedReturns(result1 bool) {
	fake.CheckOrgSpaceTargetedStub = nil
	fake.checkOrgSpaceTargetedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSharedActor) CheckOrgSpaceTargetedReturnsOnCall(i int, result1 bool) {
	fake.CheckOrgSpaceTargetedStub = nil
	if fake.checkOrgSpaceTargetedReturnsOnCall == nil {
		fake.checkOrgSpaceTargetedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkOrgSpaceTargetedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSharedActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	fake.requireCurrentUserMutex.RLock()
	defer fake.requireCurrentUserMutex.RUnlock()
	fake.requireTargetedOrgMutex.RLock()
	defer fake.requireTargetedOrgMutex.RUnlock()
	fake.isLoggedInMutex.RLock()
	defer fake.isLoggedInMutex.RUnlock()
	fake.checkOrgSpaceTargetedMutex.RLock()
	defer fake.checkOrgSpaceTargetedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSharedActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.SharedActor = new(FakeSharedActor)
