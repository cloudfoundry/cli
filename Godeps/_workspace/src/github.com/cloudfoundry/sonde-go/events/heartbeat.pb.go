// Code generated by protoc-gen-gogo.
// source: heartbeat.proto
// DO NOT EDIT!

package events

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// / A Heartbeat event both indicates liveness of the emitter, and communicates counts of events processed.
type Heartbeat struct {
	SentCount                *uint64 `protobuf:"varint,1,req,name=sentCount" json:"sentCount,omitempty"`
	ReceivedCount            *uint64 `protobuf:"varint,2,req,name=receivedCount" json:"receivedCount,omitempty"`
	ErrorCount               *uint64 `protobuf:"varint,3,req,name=errorCount" json:"errorCount,omitempty"`
	ControlMessageIdentifier *UUID   `protobuf:"bytes,4,opt,name=controlMessageIdentifier" json:"controlMessageIdentifier,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}

func (m *Heartbeat) GetSentCount() uint64 {
	if m != nil && m.SentCount != nil {
		return *m.SentCount
	}
	return 0
}

func (m *Heartbeat) GetReceivedCount() uint64 {
	if m != nil && m.ReceivedCount != nil {
		return *m.ReceivedCount
	}
	return 0
}

func (m *Heartbeat) GetErrorCount() uint64 {
	if m != nil && m.ErrorCount != nil {
		return *m.ErrorCount
	}
	return 0
}

func (m *Heartbeat) GetControlMessageIdentifier() *UUID {
	if m != nil {
		return m.ControlMessageIdentifier
	}
	return nil
}

func init() {
}
func (m *Heartbeat) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SentCount = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivedCount = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCount = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlMessageIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlMessageIdentifier == nil {
				m.ControlMessageIdentifier = &UUID{}
			}
			if err := m.ControlMessageIdentifier.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sentCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("receivedCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("errorCount")
	}

	return nil
}
func (m *Heartbeat) Size() (n int) {
	var l int
	_ = l
	if m.SentCount != nil {
		n += 1 + sovHeartbeat(uint64(*m.SentCount))
	}
	if m.ReceivedCount != nil {
		n += 1 + sovHeartbeat(uint64(*m.ReceivedCount))
	}
	if m.ErrorCount != nil {
		n += 1 + sovHeartbeat(uint64(*m.ErrorCount))
	}
	if m.ControlMessageIdentifier != nil {
		l = m.ControlMessageIdentifier.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Heartbeat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Heartbeat) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SentCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("sentCount")
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintHeartbeat(data, i, uint64(*m.SentCount))
	}
	if m.ReceivedCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("receivedCount")
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintHeartbeat(data, i, uint64(*m.ReceivedCount))
	}
	if m.ErrorCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("errorCount")
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintHeartbeat(data, i, uint64(*m.ErrorCount))
	}
	if m.ControlMessageIdentifier != nil {
		data[i] = 0x22
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.ControlMessageIdentifier.Size()))
		n1, err := m.ControlMessageIdentifier.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Heartbeat(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Heartbeat(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHeartbeat(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
