// Code generated by counterfeiter. DO NOT EDIT.
package userprintfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/actors/userprint"
)

type FakeUserPrinter struct {
	PrintUsersStub        func(string, string)
	printUsersMutex       sync.RWMutex
	printUsersArgsForCall []struct {
		arg1 string
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserPrinter) PrintUsers(arg1 string, arg2 string) {
	fake.printUsersMutex.Lock()
	fake.printUsersArgsForCall = append(fake.printUsersArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("PrintUsers", []interface{}{arg1, arg2})
	fake.printUsersMutex.Unlock()
	if fake.PrintUsersStub != nil {
		fake.PrintUsersStub(arg1, arg2)
	}
}

func (fake *FakeUserPrinter) PrintUsersCallCount() int {
	fake.printUsersMutex.RLock()
	defer fake.printUsersMutex.RUnlock()
	return len(fake.printUsersArgsForCall)
}

func (fake *FakeUserPrinter) PrintUsersCalls(stub func(string, string)) {
	fake.printUsersMutex.Lock()
	defer fake.printUsersMutex.Unlock()
	fake.PrintUsersStub = stub
}

func (fake *FakeUserPrinter) PrintUsersArgsForCall(i int) (string, string) {
	fake.printUsersMutex.RLock()
	defer fake.printUsersMutex.RUnlock()
	argsForCall := fake.printUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserPrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printUsersMutex.RLock()
	defer fake.printUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserPrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ userprint.UserPrinter = new(FakeUserPrinter)
