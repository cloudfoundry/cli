// Code generated by counterfeiter. DO NOT EDIT.
package logsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api/logs"
)

type FakeRepository struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	RecentLogsForStub        func(string) ([]logs.Loggable, error)
	recentLogsForMutex       sync.RWMutex
	recentLogsForArgsForCall []struct {
		arg1 string
	}
	recentLogsForReturns struct {
		result1 []logs.Loggable
		result2 error
	}
	recentLogsForReturnsOnCall map[int]struct {
		result1 []logs.Loggable
		result2 error
	}
	TailLogsForStub        func(string, func(), chan<- logs.Loggable, chan<- error)
	tailLogsForMutex       sync.RWMutex
	tailLogsForArgsForCall []struct {
		arg1 string
		arg2 func()
		arg3 chan<- logs.Loggable
		arg4 chan<- error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeRepository) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeRepository) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeRepository) RecentLogsFor(arg1 string) ([]logs.Loggable, error) {
	fake.recentLogsForMutex.Lock()
	ret, specificReturn := fake.recentLogsForReturnsOnCall[len(fake.recentLogsForArgsForCall)]
	fake.recentLogsForArgsForCall = append(fake.recentLogsForArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RecentLogsFor", []interface{}{arg1})
	fake.recentLogsForMutex.Unlock()
	if fake.RecentLogsForStub != nil {
		return fake.RecentLogsForStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.recentLogsForReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) RecentLogsForCallCount() int {
	fake.recentLogsForMutex.RLock()
	defer fake.recentLogsForMutex.RUnlock()
	return len(fake.recentLogsForArgsForCall)
}

func (fake *FakeRepository) RecentLogsForCalls(stub func(string) ([]logs.Loggable, error)) {
	fake.recentLogsForMutex.Lock()
	defer fake.recentLogsForMutex.Unlock()
	fake.RecentLogsForStub = stub
}

func (fake *FakeRepository) RecentLogsForArgsForCall(i int) string {
	fake.recentLogsForMutex.RLock()
	defer fake.recentLogsForMutex.RUnlock()
	argsForCall := fake.recentLogsForArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) RecentLogsForReturns(result1 []logs.Loggable, result2 error) {
	fake.recentLogsForMutex.Lock()
	defer fake.recentLogsForMutex.Unlock()
	fake.RecentLogsForStub = nil
	fake.recentLogsForReturns = struct {
		result1 []logs.Loggable
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) RecentLogsForReturnsOnCall(i int, result1 []logs.Loggable, result2 error) {
	fake.recentLogsForMutex.Lock()
	defer fake.recentLogsForMutex.Unlock()
	fake.RecentLogsForStub = nil
	if fake.recentLogsForReturnsOnCall == nil {
		fake.recentLogsForReturnsOnCall = make(map[int]struct {
			result1 []logs.Loggable
			result2 error
		})
	}
	fake.recentLogsForReturnsOnCall[i] = struct {
		result1 []logs.Loggable
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) TailLogsFor(arg1 string, arg2 func(), arg3 chan<- logs.Loggable, arg4 chan<- error) {
	fake.tailLogsForMutex.Lock()
	fake.tailLogsForArgsForCall = append(fake.tailLogsForArgsForCall, struct {
		arg1 string
		arg2 func()
		arg3 chan<- logs.Loggable
		arg4 chan<- error
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("TailLogsFor", []interface{}{arg1, arg2, arg3, arg4})
	fake.tailLogsForMutex.Unlock()
	if fake.TailLogsForStub != nil {
		fake.TailLogsForStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeRepository) TailLogsForCallCount() int {
	fake.tailLogsForMutex.RLock()
	defer fake.tailLogsForMutex.RUnlock()
	return len(fake.tailLogsForArgsForCall)
}

func (fake *FakeRepository) TailLogsForCalls(stub func(string, func(), chan<- logs.Loggable, chan<- error)) {
	fake.tailLogsForMutex.Lock()
	defer fake.tailLogsForMutex.Unlock()
	fake.TailLogsForStub = stub
}

func (fake *FakeRepository) TailLogsForArgsForCall(i int) (string, func(), chan<- logs.Loggable, chan<- error) {
	fake.tailLogsForMutex.RLock()
	defer fake.tailLogsForMutex.RUnlock()
	argsForCall := fake.tailLogsForArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.recentLogsForMutex.RLock()
	defer fake.recentLogsForMutex.RUnlock()
	fake.tailLogsForMutex.RLock()
	defer fake.tailLogsForMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logs.Repository = new(FakeRepository)
