// Code generated by counterfeiter. DO NOT EDIT.
package logsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api/logs"
)

type FakeColorLogger struct {
	LogStderrColorStub        func(string) string
	logStderrColorMutex       sync.RWMutex
	logStderrColorArgsForCall []struct {
		arg1 string
	}
	logStderrColorReturns struct {
		result1 string
	}
	logStderrColorReturnsOnCall map[int]struct {
		result1 string
	}
	LogStdoutColorStub        func(string) string
	logStdoutColorMutex       sync.RWMutex
	logStdoutColorArgsForCall []struct {
		arg1 string
	}
	logStdoutColorReturns struct {
		result1 string
	}
	logStdoutColorReturnsOnCall map[int]struct {
		result1 string
	}
	LogSysHeaderColorStub        func(string) string
	logSysHeaderColorMutex       sync.RWMutex
	logSysHeaderColorArgsForCall []struct {
		arg1 string
	}
	logSysHeaderColorReturns struct {
		result1 string
	}
	logSysHeaderColorReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeColorLogger) LogStderrColor(arg1 string) string {
	fake.logStderrColorMutex.Lock()
	ret, specificReturn := fake.logStderrColorReturnsOnCall[len(fake.logStderrColorArgsForCall)]
	fake.logStderrColorArgsForCall = append(fake.logStderrColorArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LogStderrColor", []interface{}{arg1})
	fake.logStderrColorMutex.Unlock()
	if fake.LogStderrColorStub != nil {
		return fake.LogStderrColorStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.logStderrColorReturns
	return fakeReturns.result1
}

func (fake *FakeColorLogger) LogStderrColorCallCount() int {
	fake.logStderrColorMutex.RLock()
	defer fake.logStderrColorMutex.RUnlock()
	return len(fake.logStderrColorArgsForCall)
}

func (fake *FakeColorLogger) LogStderrColorCalls(stub func(string) string) {
	fake.logStderrColorMutex.Lock()
	defer fake.logStderrColorMutex.Unlock()
	fake.LogStderrColorStub = stub
}

func (fake *FakeColorLogger) LogStderrColorArgsForCall(i int) string {
	fake.logStderrColorMutex.RLock()
	defer fake.logStderrColorMutex.RUnlock()
	argsForCall := fake.logStderrColorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeColorLogger) LogStderrColorReturns(result1 string) {
	fake.logStderrColorMutex.Lock()
	defer fake.logStderrColorMutex.Unlock()
	fake.LogStderrColorStub = nil
	fake.logStderrColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) LogStderrColorReturnsOnCall(i int, result1 string) {
	fake.logStderrColorMutex.Lock()
	defer fake.logStderrColorMutex.Unlock()
	fake.LogStderrColorStub = nil
	if fake.logStderrColorReturnsOnCall == nil {
		fake.logStderrColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.logStderrColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) LogStdoutColor(arg1 string) string {
	fake.logStdoutColorMutex.Lock()
	ret, specificReturn := fake.logStdoutColorReturnsOnCall[len(fake.logStdoutColorArgsForCall)]
	fake.logStdoutColorArgsForCall = append(fake.logStdoutColorArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LogStdoutColor", []interface{}{arg1})
	fake.logStdoutColorMutex.Unlock()
	if fake.LogStdoutColorStub != nil {
		return fake.LogStdoutColorStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.logStdoutColorReturns
	return fakeReturns.result1
}

func (fake *FakeColorLogger) LogStdoutColorCallCount() int {
	fake.logStdoutColorMutex.RLock()
	defer fake.logStdoutColorMutex.RUnlock()
	return len(fake.logStdoutColorArgsForCall)
}

func (fake *FakeColorLogger) LogStdoutColorCalls(stub func(string) string) {
	fake.logStdoutColorMutex.Lock()
	defer fake.logStdoutColorMutex.Unlock()
	fake.LogStdoutColorStub = stub
}

func (fake *FakeColorLogger) LogStdoutColorArgsForCall(i int) string {
	fake.logStdoutColorMutex.RLock()
	defer fake.logStdoutColorMutex.RUnlock()
	argsForCall := fake.logStdoutColorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeColorLogger) LogStdoutColorReturns(result1 string) {
	fake.logStdoutColorMutex.Lock()
	defer fake.logStdoutColorMutex.Unlock()
	fake.LogStdoutColorStub = nil
	fake.logStdoutColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) LogStdoutColorReturnsOnCall(i int, result1 string) {
	fake.logStdoutColorMutex.Lock()
	defer fake.logStdoutColorMutex.Unlock()
	fake.LogStdoutColorStub = nil
	if fake.logStdoutColorReturnsOnCall == nil {
		fake.logStdoutColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.logStdoutColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) LogSysHeaderColor(arg1 string) string {
	fake.logSysHeaderColorMutex.Lock()
	ret, specificReturn := fake.logSysHeaderColorReturnsOnCall[len(fake.logSysHeaderColorArgsForCall)]
	fake.logSysHeaderColorArgsForCall = append(fake.logSysHeaderColorArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LogSysHeaderColor", []interface{}{arg1})
	fake.logSysHeaderColorMutex.Unlock()
	if fake.LogSysHeaderColorStub != nil {
		return fake.LogSysHeaderColorStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.logSysHeaderColorReturns
	return fakeReturns.result1
}

func (fake *FakeColorLogger) LogSysHeaderColorCallCount() int {
	fake.logSysHeaderColorMutex.RLock()
	defer fake.logSysHeaderColorMutex.RUnlock()
	return len(fake.logSysHeaderColorArgsForCall)
}

func (fake *FakeColorLogger) LogSysHeaderColorCalls(stub func(string) string) {
	fake.logSysHeaderColorMutex.Lock()
	defer fake.logSysHeaderColorMutex.Unlock()
	fake.LogSysHeaderColorStub = stub
}

func (fake *FakeColorLogger) LogSysHeaderColorArgsForCall(i int) string {
	fake.logSysHeaderColorMutex.RLock()
	defer fake.logSysHeaderColorMutex.RUnlock()
	argsForCall := fake.logSysHeaderColorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeColorLogger) LogSysHeaderColorReturns(result1 string) {
	fake.logSysHeaderColorMutex.Lock()
	defer fake.logSysHeaderColorMutex.Unlock()
	fake.LogSysHeaderColorStub = nil
	fake.logSysHeaderColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) LogSysHeaderColorReturnsOnCall(i int, result1 string) {
	fake.logSysHeaderColorMutex.Lock()
	defer fake.logSysHeaderColorMutex.Unlock()
	fake.LogSysHeaderColorStub = nil
	if fake.logSysHeaderColorReturnsOnCall == nil {
		fake.logSysHeaderColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.logSysHeaderColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeColorLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logStderrColorMutex.RLock()
	defer fake.logStderrColorMutex.RUnlock()
	fake.logStdoutColorMutex.RLock()
	defer fake.logStdoutColorMutex.RUnlock()
	fake.logSysHeaderColorMutex.RLock()
	defer fake.logSysHeaderColorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeColorLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logs.ColorLogger = new(FakeColorLogger)
