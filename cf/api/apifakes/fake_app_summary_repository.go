// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeAppSummaryRepository struct {
	GetSummariesInCurrentSpaceStub        func() ([]models.Application, error)
	getSummariesInCurrentSpaceMutex       sync.RWMutex
	getSummariesInCurrentSpaceArgsForCall []struct {
	}
	getSummariesInCurrentSpaceReturns struct {
		result1 []models.Application
		result2 error
	}
	getSummariesInCurrentSpaceReturnsOnCall map[int]struct {
		result1 []models.Application
		result2 error
	}
	GetSummaryStub        func(string) (models.Application, error)
	getSummaryMutex       sync.RWMutex
	getSummaryArgsForCall []struct {
		arg1 string
	}
	getSummaryReturns struct {
		result1 models.Application
		result2 error
	}
	getSummaryReturnsOnCall map[int]struct {
		result1 models.Application
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppSummaryRepository) GetSummariesInCurrentSpace() ([]models.Application, error) {
	fake.getSummariesInCurrentSpaceMutex.Lock()
	ret, specificReturn := fake.getSummariesInCurrentSpaceReturnsOnCall[len(fake.getSummariesInCurrentSpaceArgsForCall)]
	fake.getSummariesInCurrentSpaceArgsForCall = append(fake.getSummariesInCurrentSpaceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSummariesInCurrentSpace", []interface{}{})
	fake.getSummariesInCurrentSpaceMutex.Unlock()
	if fake.GetSummariesInCurrentSpaceStub != nil {
		return fake.GetSummariesInCurrentSpaceStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSummariesInCurrentSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppSummaryRepository) GetSummariesInCurrentSpaceCallCount() int {
	fake.getSummariesInCurrentSpaceMutex.RLock()
	defer fake.getSummariesInCurrentSpaceMutex.RUnlock()
	return len(fake.getSummariesInCurrentSpaceArgsForCall)
}

func (fake *FakeAppSummaryRepository) GetSummariesInCurrentSpaceCalls(stub func() ([]models.Application, error)) {
	fake.getSummariesInCurrentSpaceMutex.Lock()
	defer fake.getSummariesInCurrentSpaceMutex.Unlock()
	fake.GetSummariesInCurrentSpaceStub = stub
}

func (fake *FakeAppSummaryRepository) GetSummariesInCurrentSpaceReturns(result1 []models.Application, result2 error) {
	fake.getSummariesInCurrentSpaceMutex.Lock()
	defer fake.getSummariesInCurrentSpaceMutex.Unlock()
	fake.GetSummariesInCurrentSpaceStub = nil
	fake.getSummariesInCurrentSpaceReturns = struct {
		result1 []models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSummaryRepository) GetSummariesInCurrentSpaceReturnsOnCall(i int, result1 []models.Application, result2 error) {
	fake.getSummariesInCurrentSpaceMutex.Lock()
	defer fake.getSummariesInCurrentSpaceMutex.Unlock()
	fake.GetSummariesInCurrentSpaceStub = nil
	if fake.getSummariesInCurrentSpaceReturnsOnCall == nil {
		fake.getSummariesInCurrentSpaceReturnsOnCall = make(map[int]struct {
			result1 []models.Application
			result2 error
		})
	}
	fake.getSummariesInCurrentSpaceReturnsOnCall[i] = struct {
		result1 []models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSummaryRepository) GetSummary(arg1 string) (models.Application, error) {
	fake.getSummaryMutex.Lock()
	ret, specificReturn := fake.getSummaryReturnsOnCall[len(fake.getSummaryArgsForCall)]
	fake.getSummaryArgsForCall = append(fake.getSummaryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSummary", []interface{}{arg1})
	fake.getSummaryMutex.Unlock()
	if fake.GetSummaryStub != nil {
		return fake.GetSummaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSummaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppSummaryRepository) GetSummaryCallCount() int {
	fake.getSummaryMutex.RLock()
	defer fake.getSummaryMutex.RUnlock()
	return len(fake.getSummaryArgsForCall)
}

func (fake *FakeAppSummaryRepository) GetSummaryCalls(stub func(string) (models.Application, error)) {
	fake.getSummaryMutex.Lock()
	defer fake.getSummaryMutex.Unlock()
	fake.GetSummaryStub = stub
}

func (fake *FakeAppSummaryRepository) GetSummaryArgsForCall(i int) string {
	fake.getSummaryMutex.RLock()
	defer fake.getSummaryMutex.RUnlock()
	argsForCall := fake.getSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppSummaryRepository) GetSummaryReturns(result1 models.Application, result2 error) {
	fake.getSummaryMutex.Lock()
	defer fake.getSummaryMutex.Unlock()
	fake.GetSummaryStub = nil
	fake.getSummaryReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSummaryRepository) GetSummaryReturnsOnCall(i int, result1 models.Application, result2 error) {
	fake.getSummaryMutex.Lock()
	defer fake.getSummaryMutex.Unlock()
	fake.GetSummaryStub = nil
	if fake.getSummaryReturnsOnCall == nil {
		fake.getSummaryReturnsOnCall = make(map[int]struct {
			result1 models.Application
			result2 error
		})
	}
	fake.getSummaryReturnsOnCall[i] = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSummaryRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSummariesInCurrentSpaceMutex.RLock()
	defer fake.getSummariesInCurrentSpaceMutex.RUnlock()
	fake.getSummaryMutex.RLock()
	defer fake.getSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppSummaryRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.AppSummaryRepository = new(FakeAppSummaryRepository)
