// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeRouteRepository struct {
	BindStub        func(string, string) error
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindReturns struct {
		result1 error
	}
	bindReturnsOnCall map[int]struct {
		result1 error
	}
	CheckIfExistsStub        func(string, models.DomainFields, string) (bool, error)
	checkIfExistsMutex       sync.RWMutex
	checkIfExistsArgsForCall []struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
	}
	checkIfExistsReturns struct {
		result1 bool
		result2 error
	}
	checkIfExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CreateStub        func(string, models.DomainFields, string, int, bool) (models.Route, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
		arg4 int
		arg5 bool
	}
	createReturns struct {
		result1 models.Route
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 models.Route
		result2 error
	}
	CreateInSpaceStub        func(string, string, string, string, int, bool) (models.Route, error)
	createInSpaceMutex       sync.RWMutex
	createInSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 bool
	}
	createInSpaceReturns struct {
		result1 models.Route
		result2 error
	}
	createInSpaceReturnsOnCall map[int]struct {
		result1 models.Route
		result2 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindStub        func(string, models.DomainFields, string, int) (models.Route, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
		arg4 int
	}
	findReturns struct {
		result1 models.Route
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 models.Route
		result2 error
	}
	ListAllRoutesStub        func(func(models.Route) bool) error
	listAllRoutesMutex       sync.RWMutex
	listAllRoutesArgsForCall []struct {
		arg1 func(models.Route) bool
	}
	listAllRoutesReturns struct {
		result1 error
	}
	listAllRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	ListRoutesStub        func(func(models.Route) bool) error
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct {
		arg1 func(models.Route) bool
	}
	listRoutesReturns struct {
		result1 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	UnbindStub        func(string, string) error
	unbindMutex       sync.RWMutex
	unbindArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unbindReturns struct {
		result1 error
	}
	unbindReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteRepository) Bind(arg1 string, arg2 string) error {
	fake.bindMutex.Lock()
	ret, specificReturn := fake.bindReturnsOnCall[len(fake.bindArgsForCall)]
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Bind", []interface{}{arg1, arg2})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindReturns
	return fakeReturns.result1
}

func (fake *FakeRouteRepository) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeRouteRepository) BindCalls(stub func(string, string) error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = stub
}

func (fake *FakeRouteRepository) BindArgsForCall(i int) (string, string) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	argsForCall := fake.bindArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRouteRepository) BindReturns(result1 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) BindReturnsOnCall(i int, result1 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	if fake.bindReturnsOnCall == nil {
		fake.bindReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) CheckIfExists(arg1 string, arg2 models.DomainFields, arg3 string) (bool, error) {
	fake.checkIfExistsMutex.Lock()
	ret, specificReturn := fake.checkIfExistsReturnsOnCall[len(fake.checkIfExistsArgsForCall)]
	fake.checkIfExistsArgsForCall = append(fake.checkIfExistsArgsForCall, struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CheckIfExists", []interface{}{arg1, arg2, arg3})
	fake.checkIfExistsMutex.Unlock()
	if fake.CheckIfExistsStub != nil {
		return fake.CheckIfExistsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkIfExistsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouteRepository) CheckIfExistsCallCount() int {
	fake.checkIfExistsMutex.RLock()
	defer fake.checkIfExistsMutex.RUnlock()
	return len(fake.checkIfExistsArgsForCall)
}

func (fake *FakeRouteRepository) CheckIfExistsCalls(stub func(string, models.DomainFields, string) (bool, error)) {
	fake.checkIfExistsMutex.Lock()
	defer fake.checkIfExistsMutex.Unlock()
	fake.CheckIfExistsStub = stub
}

func (fake *FakeRouteRepository) CheckIfExistsArgsForCall(i int) (string, models.DomainFields, string) {
	fake.checkIfExistsMutex.RLock()
	defer fake.checkIfExistsMutex.RUnlock()
	argsForCall := fake.checkIfExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRouteRepository) CheckIfExistsReturns(result1 bool, result2 error) {
	fake.checkIfExistsMutex.Lock()
	defer fake.checkIfExistsMutex.Unlock()
	fake.CheckIfExistsStub = nil
	fake.checkIfExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) CheckIfExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkIfExistsMutex.Lock()
	defer fake.checkIfExistsMutex.Unlock()
	fake.CheckIfExistsStub = nil
	if fake.checkIfExistsReturnsOnCall == nil {
		fake.checkIfExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkIfExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) Create(arg1 string, arg2 models.DomainFields, arg3 string, arg4 int, arg5 bool) (models.Route, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
		arg4 int
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouteRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRouteRepository) CreateCalls(stub func(string, models.DomainFields, string, int, bool) (models.Route, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeRouteRepository) CreateArgsForCall(i int) (string, models.DomainFields, string, int, bool) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeRouteRepository) CreateReturns(result1 models.Route, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) CreateReturnsOnCall(i int, result1 models.Route, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 models.Route
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) CreateInSpace(arg1 string, arg2 string, arg3 string, arg4 string, arg5 int, arg6 bool) (models.Route, error) {
	fake.createInSpaceMutex.Lock()
	ret, specificReturn := fake.createInSpaceReturnsOnCall[len(fake.createInSpaceArgsForCall)]
	fake.createInSpaceArgsForCall = append(fake.createInSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 bool
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("CreateInSpace", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.createInSpaceMutex.Unlock()
	if fake.CreateInSpaceStub != nil {
		return fake.CreateInSpaceStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouteRepository) CreateInSpaceCallCount() int {
	fake.createInSpaceMutex.RLock()
	defer fake.createInSpaceMutex.RUnlock()
	return len(fake.createInSpaceArgsForCall)
}

func (fake *FakeRouteRepository) CreateInSpaceCalls(stub func(string, string, string, string, int, bool) (models.Route, error)) {
	fake.createInSpaceMutex.Lock()
	defer fake.createInSpaceMutex.Unlock()
	fake.CreateInSpaceStub = stub
}

func (fake *FakeRouteRepository) CreateInSpaceArgsForCall(i int) (string, string, string, string, int, bool) {
	fake.createInSpaceMutex.RLock()
	defer fake.createInSpaceMutex.RUnlock()
	argsForCall := fake.createInSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeRouteRepository) CreateInSpaceReturns(result1 models.Route, result2 error) {
	fake.createInSpaceMutex.Lock()
	defer fake.createInSpaceMutex.Unlock()
	fake.CreateInSpaceStub = nil
	fake.createInSpaceReturns = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) CreateInSpaceReturnsOnCall(i int, result1 models.Route, result2 error) {
	fake.createInSpaceMutex.Lock()
	defer fake.createInSpaceMutex.Unlock()
	fake.CreateInSpaceStub = nil
	if fake.createInSpaceReturnsOnCall == nil {
		fake.createInSpaceReturnsOnCall = make(map[int]struct {
			result1 models.Route
			result2 error
		})
	}
	fake.createInSpaceReturnsOnCall[i] = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *FakeRouteRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeRouteRepository) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeRouteRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRouteRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) Find(arg1 string, arg2 models.DomainFields, arg3 string, arg4 int) (models.Route, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 string
		arg2 models.DomainFields
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Find", []interface{}{arg1, arg2, arg3, arg4})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouteRepository) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeRouteRepository) FindCalls(stub func(string, models.DomainFields, string, int) (models.Route, error)) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakeRouteRepository) FindArgsForCall(i int) (string, models.DomainFields, string, int) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRouteRepository) FindReturns(result1 models.Route, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) FindReturnsOnCall(i int, result1 models.Route, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 models.Route
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) ListAllRoutes(arg1 func(models.Route) bool) error {
	fake.listAllRoutesMutex.Lock()
	ret, specificReturn := fake.listAllRoutesReturnsOnCall[len(fake.listAllRoutesArgsForCall)]
	fake.listAllRoutesArgsForCall = append(fake.listAllRoutesArgsForCall, struct {
		arg1 func(models.Route) bool
	}{arg1})
	fake.recordInvocation("ListAllRoutes", []interface{}{arg1})
	fake.listAllRoutesMutex.Unlock()
	if fake.ListAllRoutesStub != nil {
		return fake.ListAllRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAllRoutesReturns
	return fakeReturns.result1
}

func (fake *FakeRouteRepository) ListAllRoutesCallCount() int {
	fake.listAllRoutesMutex.RLock()
	defer fake.listAllRoutesMutex.RUnlock()
	return len(fake.listAllRoutesArgsForCall)
}

func (fake *FakeRouteRepository) ListAllRoutesCalls(stub func(func(models.Route) bool) error) {
	fake.listAllRoutesMutex.Lock()
	defer fake.listAllRoutesMutex.Unlock()
	fake.ListAllRoutesStub = stub
}

func (fake *FakeRouteRepository) ListAllRoutesArgsForCall(i int) func(models.Route) bool {
	fake.listAllRoutesMutex.RLock()
	defer fake.listAllRoutesMutex.RUnlock()
	argsForCall := fake.listAllRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRouteRepository) ListAllRoutesReturns(result1 error) {
	fake.listAllRoutesMutex.Lock()
	defer fake.listAllRoutesMutex.Unlock()
	fake.ListAllRoutesStub = nil
	fake.listAllRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) ListAllRoutesReturnsOnCall(i int, result1 error) {
	fake.listAllRoutesMutex.Lock()
	defer fake.listAllRoutesMutex.Unlock()
	fake.ListAllRoutesStub = nil
	if fake.listAllRoutesReturnsOnCall == nil {
		fake.listAllRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAllRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) ListRoutes(arg1 func(models.Route) bool) error {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct {
		arg1 func(models.Route) bool
	}{arg1})
	fake.recordInvocation("ListRoutes", []interface{}{arg1})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listRoutesReturns
	return fakeReturns.result1
}

func (fake *FakeRouteRepository) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *FakeRouteRepository) ListRoutesCalls(stub func(func(models.Route) bool) error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = stub
}

func (fake *FakeRouteRepository) ListRoutesArgsForCall(i int) func(models.Route) bool {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	argsForCall := fake.listRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRouteRepository) ListRoutesReturns(result1 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) ListRoutesReturnsOnCall(i int, result1 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) Unbind(arg1 string, arg2 string) error {
	fake.unbindMutex.Lock()
	ret, specificReturn := fake.unbindReturnsOnCall[len(fake.unbindArgsForCall)]
	fake.unbindArgsForCall = append(fake.unbindArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Unbind", []interface{}{arg1, arg2})
	fake.unbindMutex.Unlock()
	if fake.UnbindStub != nil {
		return fake.UnbindStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unbindReturns
	return fakeReturns.result1
}

func (fake *FakeRouteRepository) UnbindCallCount() int {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return len(fake.unbindArgsForCall)
}

func (fake *FakeRouteRepository) UnbindCalls(stub func(string, string) error) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = stub
}

func (fake *FakeRouteRepository) UnbindArgsForCall(i int) (string, string) {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	argsForCall := fake.unbindArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRouteRepository) UnbindReturns(result1 error) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = nil
	fake.unbindReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) UnbindReturnsOnCall(i int, result1 error) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = nil
	if fake.unbindReturnsOnCall == nil {
		fake.unbindReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	fake.checkIfExistsMutex.RLock()
	defer fake.checkIfExistsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.createInSpaceMutex.RLock()
	defer fake.createInSpaceMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.listAllRoutesMutex.RLock()
	defer fake.listAllRoutesMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.RouteRepository = new(FakeRouteRepository)
