// Code generated by counterfeiter. DO NOT EDIT.
package appeventsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api/appevents"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeRepository struct {
	RecentEventsStub        func(string, int64) ([]models.EventFields, error)
	recentEventsMutex       sync.RWMutex
	recentEventsArgsForCall []struct {
		arg1 string
		arg2 int64
	}
	recentEventsReturns struct {
		result1 []models.EventFields
		result2 error
	}
	recentEventsReturnsOnCall map[int]struct {
		result1 []models.EventFields
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) RecentEvents(arg1 string, arg2 int64) ([]models.EventFields, error) {
	fake.recentEventsMutex.Lock()
	ret, specificReturn := fake.recentEventsReturnsOnCall[len(fake.recentEventsArgsForCall)]
	fake.recentEventsArgsForCall = append(fake.recentEventsArgsForCall, struct {
		arg1 string
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("RecentEvents", []interface{}{arg1, arg2})
	fake.recentEventsMutex.Unlock()
	if fake.RecentEventsStub != nil {
		return fake.RecentEventsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.recentEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) RecentEventsCallCount() int {
	fake.recentEventsMutex.RLock()
	defer fake.recentEventsMutex.RUnlock()
	return len(fake.recentEventsArgsForCall)
}

func (fake *FakeRepository) RecentEventsCalls(stub func(string, int64) ([]models.EventFields, error)) {
	fake.recentEventsMutex.Lock()
	defer fake.recentEventsMutex.Unlock()
	fake.RecentEventsStub = stub
}

func (fake *FakeRepository) RecentEventsArgsForCall(i int) (string, int64) {
	fake.recentEventsMutex.RLock()
	defer fake.recentEventsMutex.RUnlock()
	argsForCall := fake.recentEventsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) RecentEventsReturns(result1 []models.EventFields, result2 error) {
	fake.recentEventsMutex.Lock()
	defer fake.recentEventsMutex.Unlock()
	fake.RecentEventsStub = nil
	fake.recentEventsReturns = struct {
		result1 []models.EventFields
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) RecentEventsReturnsOnCall(i int, result1 []models.EventFields, result2 error) {
	fake.recentEventsMutex.Lock()
	defer fake.recentEventsMutex.Unlock()
	fake.RecentEventsStub = nil
	if fake.recentEventsReturnsOnCall == nil {
		fake.recentEventsReturnsOnCall = make(map[int]struct {
			result1 []models.EventFields
			result2 error
		})
	}
	fake.recentEventsReturnsOnCall[i] = struct {
		result1 []models.EventFields
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recentEventsMutex.RLock()
	defer fake.recentEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ appevents.Repository = new(FakeRepository)
