// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api"
)

type FakeRouteServiceBindingRepository struct {
	BindStub        func(instanceGuid, routeGuid string, upsi bool) (apiErr error)
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		instanceGuid string
		routeGuid    string
		upsi         bool
	}
	bindReturns struct {
		result1 error
	}
}

func (fake *FakeRouteServiceBindingRepository) Bind(instanceGuid string, routeGuid string, upsi bool) (apiErr error) {
	fake.bindMutex.Lock()
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		instanceGuid string
		routeGuid    string
		upsi         bool
	}{instanceGuid, routeGuid, upsi})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(instanceGuid, routeGuid, upsi)
	} else {
		return fake.bindReturns.result1
	}
}

func (fake *FakeRouteServiceBindingRepository) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeRouteServiceBindingRepository) BindArgsForCall(i int) (string, string, bool) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return fake.bindArgsForCall[i].instanceGuid, fake.bindArgsForCall[i].routeGuid, fake.bindArgsForCall[i].upsi
}

func (fake *FakeRouteServiceBindingRepository) BindReturns(result1 error) {
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

var _ api.RouteServiceBindingRepository = new(FakeRouteServiceBindingRepository)
