// Code generated by counterfeiter. DO NOT EDIT.
package spacequotasfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api/spacequotas"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeSpaceQuotaRepository struct {
	AssociateSpaceWithQuotaStub        func(string, string) error
	associateSpaceWithQuotaMutex       sync.RWMutex
	associateSpaceWithQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceWithQuotaReturns struct {
		result1 error
	}
	associateSpaceWithQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	CreateStub        func(models.SpaceQuota) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 models.SpaceQuota
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindByGUIDStub        func(string) (models.SpaceQuota, error)
	findByGUIDMutex       sync.RWMutex
	findByGUIDArgsForCall []struct {
		arg1 string
	}
	findByGUIDReturns struct {
		result1 models.SpaceQuota
		result2 error
	}
	findByGUIDReturnsOnCall map[int]struct {
		result1 models.SpaceQuota
		result2 error
	}
	FindByNameStub        func(string) (models.SpaceQuota, error)
	findByNameMutex       sync.RWMutex
	findByNameArgsForCall []struct {
		arg1 string
	}
	findByNameReturns struct {
		result1 models.SpaceQuota
		result2 error
	}
	findByNameReturnsOnCall map[int]struct {
		result1 models.SpaceQuota
		result2 error
	}
	FindByNameAndOrgGUIDStub        func(string, string) (models.SpaceQuota, error)
	findByNameAndOrgGUIDMutex       sync.RWMutex
	findByNameAndOrgGUIDArgsForCall []struct {
		arg1 string
		arg2 string
	}
	findByNameAndOrgGUIDReturns struct {
		result1 models.SpaceQuota
		result2 error
	}
	findByNameAndOrgGUIDReturnsOnCall map[int]struct {
		result1 models.SpaceQuota
		result2 error
	}
	FindByOrgStub        func(string) ([]models.SpaceQuota, error)
	findByOrgMutex       sync.RWMutex
	findByOrgArgsForCall []struct {
		arg1 string
	}
	findByOrgReturns struct {
		result1 []models.SpaceQuota
		result2 error
	}
	findByOrgReturnsOnCall map[int]struct {
		result1 []models.SpaceQuota
		result2 error
	}
	UnassignQuotaFromSpaceStub        func(string, string) error
	unassignQuotaFromSpaceMutex       sync.RWMutex
	unassignQuotaFromSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unassignQuotaFromSpaceReturns struct {
		result1 error
	}
	unassignQuotaFromSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(models.SpaceQuota) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 models.SpaceQuota
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuota(arg1 string, arg2 string) error {
	fake.associateSpaceWithQuotaMutex.Lock()
	ret, specificReturn := fake.associateSpaceWithQuotaReturnsOnCall[len(fake.associateSpaceWithQuotaArgsForCall)]
	fake.associateSpaceWithQuotaArgsForCall = append(fake.associateSpaceWithQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceWithQuota", []interface{}{arg1, arg2})
	fake.associateSpaceWithQuotaMutex.Unlock()
	if fake.AssociateSpaceWithQuotaStub != nil {
		return fake.AssociateSpaceWithQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.associateSpaceWithQuotaReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuotaCallCount() int {
	fake.associateSpaceWithQuotaMutex.RLock()
	defer fake.associateSpaceWithQuotaMutex.RUnlock()
	return len(fake.associateSpaceWithQuotaArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuotaCalls(stub func(string, string) error) {
	fake.associateSpaceWithQuotaMutex.Lock()
	defer fake.associateSpaceWithQuotaMutex.Unlock()
	fake.AssociateSpaceWithQuotaStub = stub
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuotaArgsForCall(i int) (string, string) {
	fake.associateSpaceWithQuotaMutex.RLock()
	defer fake.associateSpaceWithQuotaMutex.RUnlock()
	argsForCall := fake.associateSpaceWithQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuotaReturns(result1 error) {
	fake.associateSpaceWithQuotaMutex.Lock()
	defer fake.associateSpaceWithQuotaMutex.Unlock()
	fake.AssociateSpaceWithQuotaStub = nil
	fake.associateSpaceWithQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) AssociateSpaceWithQuotaReturnsOnCall(i int, result1 error) {
	fake.associateSpaceWithQuotaMutex.Lock()
	defer fake.associateSpaceWithQuotaMutex.Unlock()
	fake.AssociateSpaceWithQuotaStub = nil
	if fake.associateSpaceWithQuotaReturnsOnCall == nil {
		fake.associateSpaceWithQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.associateSpaceWithQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) Create(arg1 models.SpaceQuota) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 models.SpaceQuota
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceQuotaRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) CreateCalls(stub func(models.SpaceQuota) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeSpaceQuotaRepository) CreateArgsForCall(i int) models.SpaceQuota {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceQuotaRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeSpaceQuotaRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) FindByGUID(arg1 string) (models.SpaceQuota, error) {
	fake.findByGUIDMutex.Lock()
	ret, specificReturn := fake.findByGUIDReturnsOnCall[len(fake.findByGUIDArgsForCall)]
	fake.findByGUIDArgsForCall = append(fake.findByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByGUID", []interface{}{arg1})
	fake.findByGUIDMutex.Unlock()
	if fake.FindByGUIDStub != nil {
		return fake.FindByGUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpaceQuotaRepository) FindByGUIDCallCount() int {
	fake.findByGUIDMutex.RLock()
	defer fake.findByGUIDMutex.RUnlock()
	return len(fake.findByGUIDArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) FindByGUIDCalls(stub func(string) (models.SpaceQuota, error)) {
	fake.findByGUIDMutex.Lock()
	defer fake.findByGUIDMutex.Unlock()
	fake.FindByGUIDStub = stub
}

func (fake *FakeSpaceQuotaRepository) FindByGUIDArgsForCall(i int) string {
	fake.findByGUIDMutex.RLock()
	defer fake.findByGUIDMutex.RUnlock()
	argsForCall := fake.findByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) FindByGUIDReturns(result1 models.SpaceQuota, result2 error) {
	fake.findByGUIDMutex.Lock()
	defer fake.findByGUIDMutex.Unlock()
	fake.FindByGUIDStub = nil
	fake.findByGUIDReturns = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByGUIDReturnsOnCall(i int, result1 models.SpaceQuota, result2 error) {
	fake.findByGUIDMutex.Lock()
	defer fake.findByGUIDMutex.Unlock()
	fake.FindByGUIDStub = nil
	if fake.findByGUIDReturnsOnCall == nil {
		fake.findByGUIDReturnsOnCall = make(map[int]struct {
			result1 models.SpaceQuota
			result2 error
		})
	}
	fake.findByGUIDReturnsOnCall[i] = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByName(arg1 string) (models.SpaceQuota, error) {
	fake.findByNameMutex.Lock()
	ret, specificReturn := fake.findByNameReturnsOnCall[len(fake.findByNameArgsForCall)]
	fake.findByNameArgsForCall = append(fake.findByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByName", []interface{}{arg1})
	fake.findByNameMutex.Unlock()
	if fake.FindByNameStub != nil {
		return fake.FindByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpaceQuotaRepository) FindByNameCallCount() int {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	return len(fake.findByNameArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) FindByNameCalls(stub func(string) (models.SpaceQuota, error)) {
	fake.findByNameMutex.Lock()
	defer fake.findByNameMutex.Unlock()
	fake.FindByNameStub = stub
}

func (fake *FakeSpaceQuotaRepository) FindByNameArgsForCall(i int) string {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	argsForCall := fake.findByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) FindByNameReturns(result1 models.SpaceQuota, result2 error) {
	fake.findByNameMutex.Lock()
	defer fake.findByNameMutex.Unlock()
	fake.FindByNameStub = nil
	fake.findByNameReturns = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByNameReturnsOnCall(i int, result1 models.SpaceQuota, result2 error) {
	fake.findByNameMutex.Lock()
	defer fake.findByNameMutex.Unlock()
	fake.FindByNameStub = nil
	if fake.findByNameReturnsOnCall == nil {
		fake.findByNameReturnsOnCall = make(map[int]struct {
			result1 models.SpaceQuota
			result2 error
		})
	}
	fake.findByNameReturnsOnCall[i] = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUID(arg1 string, arg2 string) (models.SpaceQuota, error) {
	fake.findByNameAndOrgGUIDMutex.Lock()
	ret, specificReturn := fake.findByNameAndOrgGUIDReturnsOnCall[len(fake.findByNameAndOrgGUIDArgsForCall)]
	fake.findByNameAndOrgGUIDArgsForCall = append(fake.findByNameAndOrgGUIDArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("FindByNameAndOrgGUID", []interface{}{arg1, arg2})
	fake.findByNameAndOrgGUIDMutex.Unlock()
	if fake.FindByNameAndOrgGUIDStub != nil {
		return fake.FindByNameAndOrgGUIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByNameAndOrgGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUIDCallCount() int {
	fake.findByNameAndOrgGUIDMutex.RLock()
	defer fake.findByNameAndOrgGUIDMutex.RUnlock()
	return len(fake.findByNameAndOrgGUIDArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUIDCalls(stub func(string, string) (models.SpaceQuota, error)) {
	fake.findByNameAndOrgGUIDMutex.Lock()
	defer fake.findByNameAndOrgGUIDMutex.Unlock()
	fake.FindByNameAndOrgGUIDStub = stub
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUIDArgsForCall(i int) (string, string) {
	fake.findByNameAndOrgGUIDMutex.RLock()
	defer fake.findByNameAndOrgGUIDMutex.RUnlock()
	argsForCall := fake.findByNameAndOrgGUIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUIDReturns(result1 models.SpaceQuota, result2 error) {
	fake.findByNameAndOrgGUIDMutex.Lock()
	defer fake.findByNameAndOrgGUIDMutex.Unlock()
	fake.FindByNameAndOrgGUIDStub = nil
	fake.findByNameAndOrgGUIDReturns = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByNameAndOrgGUIDReturnsOnCall(i int, result1 models.SpaceQuota, result2 error) {
	fake.findByNameAndOrgGUIDMutex.Lock()
	defer fake.findByNameAndOrgGUIDMutex.Unlock()
	fake.FindByNameAndOrgGUIDStub = nil
	if fake.findByNameAndOrgGUIDReturnsOnCall == nil {
		fake.findByNameAndOrgGUIDReturnsOnCall = make(map[int]struct {
			result1 models.SpaceQuota
			result2 error
		})
	}
	fake.findByNameAndOrgGUIDReturnsOnCall[i] = struct {
		result1 models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByOrg(arg1 string) ([]models.SpaceQuota, error) {
	fake.findByOrgMutex.Lock()
	ret, specificReturn := fake.findByOrgReturnsOnCall[len(fake.findByOrgArgsForCall)]
	fake.findByOrgArgsForCall = append(fake.findByOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByOrg", []interface{}{arg1})
	fake.findByOrgMutex.Unlock()
	if fake.FindByOrgStub != nil {
		return fake.FindByOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpaceQuotaRepository) FindByOrgCallCount() int {
	fake.findByOrgMutex.RLock()
	defer fake.findByOrgMutex.RUnlock()
	return len(fake.findByOrgArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) FindByOrgCalls(stub func(string) ([]models.SpaceQuota, error)) {
	fake.findByOrgMutex.Lock()
	defer fake.findByOrgMutex.Unlock()
	fake.FindByOrgStub = stub
}

func (fake *FakeSpaceQuotaRepository) FindByOrgArgsForCall(i int) string {
	fake.findByOrgMutex.RLock()
	defer fake.findByOrgMutex.RUnlock()
	argsForCall := fake.findByOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) FindByOrgReturns(result1 []models.SpaceQuota, result2 error) {
	fake.findByOrgMutex.Lock()
	defer fake.findByOrgMutex.Unlock()
	fake.FindByOrgStub = nil
	fake.findByOrgReturns = struct {
		result1 []models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) FindByOrgReturnsOnCall(i int, result1 []models.SpaceQuota, result2 error) {
	fake.findByOrgMutex.Lock()
	defer fake.findByOrgMutex.Unlock()
	fake.FindByOrgStub = nil
	if fake.findByOrgReturnsOnCall == nil {
		fake.findByOrgReturnsOnCall = make(map[int]struct {
			result1 []models.SpaceQuota
			result2 error
		})
	}
	fake.findByOrgReturnsOnCall[i] = struct {
		result1 []models.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpace(arg1 string, arg2 string) error {
	fake.unassignQuotaFromSpaceMutex.Lock()
	ret, specificReturn := fake.unassignQuotaFromSpaceReturnsOnCall[len(fake.unassignQuotaFromSpaceArgsForCall)]
	fake.unassignQuotaFromSpaceArgsForCall = append(fake.unassignQuotaFromSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UnassignQuotaFromSpace", []interface{}{arg1, arg2})
	fake.unassignQuotaFromSpaceMutex.Unlock()
	if fake.UnassignQuotaFromSpaceStub != nil {
		return fake.UnassignQuotaFromSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unassignQuotaFromSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpaceCallCount() int {
	fake.unassignQuotaFromSpaceMutex.RLock()
	defer fake.unassignQuotaFromSpaceMutex.RUnlock()
	return len(fake.unassignQuotaFromSpaceArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpaceCalls(stub func(string, string) error) {
	fake.unassignQuotaFromSpaceMutex.Lock()
	defer fake.unassignQuotaFromSpaceMutex.Unlock()
	fake.UnassignQuotaFromSpaceStub = stub
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpaceArgsForCall(i int) (string, string) {
	fake.unassignQuotaFromSpaceMutex.RLock()
	defer fake.unassignQuotaFromSpaceMutex.RUnlock()
	argsForCall := fake.unassignQuotaFromSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpaceReturns(result1 error) {
	fake.unassignQuotaFromSpaceMutex.Lock()
	defer fake.unassignQuotaFromSpaceMutex.Unlock()
	fake.UnassignQuotaFromSpaceStub = nil
	fake.unassignQuotaFromSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) UnassignQuotaFromSpaceReturnsOnCall(i int, result1 error) {
	fake.unassignQuotaFromSpaceMutex.Lock()
	defer fake.unassignQuotaFromSpaceMutex.Unlock()
	fake.UnassignQuotaFromSpaceStub = nil
	if fake.unassignQuotaFromSpaceReturnsOnCall == nil {
		fake.unassignQuotaFromSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unassignQuotaFromSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) Update(arg1 models.SpaceQuota) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 models.SpaceQuota
	}{arg1})
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceQuotaRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeSpaceQuotaRepository) UpdateCalls(stub func(models.SpaceQuota) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeSpaceQuotaRepository) UpdateArgsForCall(i int) models.SpaceQuota {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpaceQuotaRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceQuotaRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.associateSpaceWithQuotaMutex.RLock()
	defer fake.associateSpaceWithQuotaMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findByGUIDMutex.RLock()
	defer fake.findByGUIDMutex.RUnlock()
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	fake.findByNameAndOrgGUIDMutex.RLock()
	defer fake.findByNameAndOrgGUIDMutex.RUnlock()
	fake.findByOrgMutex.RLock()
	defer fake.findByOrgMutex.RUnlock()
	fake.unassignQuotaFromSpaceMutex.RLock()
	defer fake.unassignQuotaFromSpaceMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpaceQuotaRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spacequotas.SpaceQuotaRepository = new(FakeSpaceQuotaRepository)
