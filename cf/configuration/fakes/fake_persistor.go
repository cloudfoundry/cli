// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/configuration"
)

type FakePersistor struct {
	DeleteStub        func()
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct{}
	ExistsStub        func() bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct{}
	existsReturns     struct {
		result1 bool
	}
	LoadStub        func(configuration.DataInterface) error
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 configuration.DataInterface
	}
	loadReturns struct {
		result1 error
	}
	SaveStub        func(configuration.DataInterface) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 configuration.DataInterface
	}
	saveReturns struct {
		result1 error
	}
}

func (fake *FakePersistor) Delete() {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct{}{})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		fake.DeleteStub()
	}
}

func (fake *FakePersistor) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakePersistor) Exists() bool {
	fake.existsMutex.Lock()
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct{}{})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub()
	} else {
		return fake.existsReturns.result1
	}
}

func (fake *FakePersistor) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakePersistor) ExistsReturns(result1 bool) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePersistor) Load(arg1 configuration.DataInterface) error {
	fake.loadMutex.Lock()
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 configuration.DataInterface
	}{arg1})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(arg1)
	} else {
		return fake.loadReturns.result1
	}
}

func (fake *FakePersistor) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakePersistor) LoadArgsForCall(i int) configuration.DataInterface {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return fake.loadArgsForCall[i].arg1
}

func (fake *FakePersistor) LoadReturns(result1 error) {
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) Save(arg1 configuration.DataInterface) error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 configuration.DataInterface
	}{arg1})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(arg1)
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakePersistor) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakePersistor) SaveArgsForCall(i int) configuration.DataInterface {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].arg1
}

func (fake *FakePersistor) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

var _ configuration.Persistor = new(FakePersistor)
