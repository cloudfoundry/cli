// Code generated by counterfeiter. DO NOT EDIT.
package netfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/net"
)

type FakeWarningProducer struct {
	WarningsStub        func() []string
	warningsMutex       sync.RWMutex
	warningsArgsForCall []struct {
	}
	warningsReturns struct {
		result1 []string
	}
	warningsReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWarningProducer) Warnings() []string {
	fake.warningsMutex.Lock()
	ret, specificReturn := fake.warningsReturnsOnCall[len(fake.warningsArgsForCall)]
	fake.warningsArgsForCall = append(fake.warningsArgsForCall, struct {
	}{})
	fake.recordInvocation("Warnings", []interface{}{})
	fake.warningsMutex.Unlock()
	if fake.WarningsStub != nil {
		return fake.WarningsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.warningsReturns
	return fakeReturns.result1
}

func (fake *FakeWarningProducer) WarningsCallCount() int {
	fake.warningsMutex.RLock()
	defer fake.warningsMutex.RUnlock()
	return len(fake.warningsArgsForCall)
}

func (fake *FakeWarningProducer) WarningsCalls(stub func() []string) {
	fake.warningsMutex.Lock()
	defer fake.warningsMutex.Unlock()
	fake.WarningsStub = stub
}

func (fake *FakeWarningProducer) WarningsReturns(result1 []string) {
	fake.warningsMutex.Lock()
	defer fake.warningsMutex.Unlock()
	fake.WarningsStub = nil
	fake.warningsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeWarningProducer) WarningsReturnsOnCall(i int, result1 []string) {
	fake.warningsMutex.Lock()
	defer fake.warningsMutex.Unlock()
	fake.WarningsStub = nil
	if fake.warningsReturnsOnCall == nil {
		fake.warningsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.warningsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeWarningProducer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.warningsMutex.RLock()
	defer fake.warningsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWarningProducer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ net.WarningProducer = new(FakeWarningProducer)
