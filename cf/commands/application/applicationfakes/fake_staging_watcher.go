// Code generated by counterfeiter. DO NOT EDIT.
package applicationfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/commands/application"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeStagingWatcher struct {
	WatchStagingStub        func(models.Application, string, string, func(app models.Application) (models.Application, error)) (models.Application, error)
	watchStagingMutex       sync.RWMutex
	watchStagingArgsForCall []struct {
		arg1 models.Application
		arg2 string
		arg3 string
		arg4 func(app models.Application) (models.Application, error)
	}
	watchStagingReturns struct {
		result1 models.Application
		result2 error
	}
	watchStagingReturnsOnCall map[int]struct {
		result1 models.Application
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStagingWatcher) WatchStaging(arg1 models.Application, arg2 string, arg3 string, arg4 func(app models.Application) (models.Application, error)) (models.Application, error) {
	fake.watchStagingMutex.Lock()
	ret, specificReturn := fake.watchStagingReturnsOnCall[len(fake.watchStagingArgsForCall)]
	fake.watchStagingArgsForCall = append(fake.watchStagingArgsForCall, struct {
		arg1 models.Application
		arg2 string
		arg3 string
		arg4 func(app models.Application) (models.Application, error)
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("WatchStaging", []interface{}{arg1, arg2, arg3, arg4})
	fake.watchStagingMutex.Unlock()
	if fake.WatchStagingStub != nil {
		return fake.WatchStagingStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.watchStagingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStagingWatcher) WatchStagingCallCount() int {
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	return len(fake.watchStagingArgsForCall)
}

func (fake *FakeStagingWatcher) WatchStagingCalls(stub func(models.Application, string, string, func(app models.Application) (models.Application, error)) (models.Application, error)) {
	fake.watchStagingMutex.Lock()
	defer fake.watchStagingMutex.Unlock()
	fake.WatchStagingStub = stub
}

func (fake *FakeStagingWatcher) WatchStagingArgsForCall(i int) (models.Application, string, string, func(app models.Application) (models.Application, error)) {
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	argsForCall := fake.watchStagingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeStagingWatcher) WatchStagingReturns(result1 models.Application, result2 error) {
	fake.watchStagingMutex.Lock()
	defer fake.watchStagingMutex.Unlock()
	fake.WatchStagingStub = nil
	fake.watchStagingReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingWatcher) WatchStagingReturnsOnCall(i int, result1 models.Application, result2 error) {
	fake.watchStagingMutex.Lock()
	defer fake.watchStagingMutex.Unlock()
	fake.WatchStagingStub = nil
	if fake.watchStagingReturnsOnCall == nil {
		fake.watchStagingReturnsOnCall = make(map[int]struct {
			result1 models.Application
			result2 error
		})
	}
	fake.watchStagingReturnsOnCall[i] = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStagingWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ application.StagingWatcher = new(FakeStagingWatcher)
